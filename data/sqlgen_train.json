[
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many heads of the departments are older than 56 ?\n## Context:\nCREATE TABLE head (age INTEGER)\n",
        "output": "SELECT COUNT(*) FROM head WHERE age > 56"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name, born state and age of the heads of departments ordered by age.\n## Context:\nCREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)\n",
        "output": "SELECT name, born_state, age FROM head ORDER BY age"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the creation year, name and budget of each department.\n## Context:\nCREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)\n",
        "output": "SELECT creation, name, budget_in_billions FROM department"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the maximum and minimum budget of the departments?\n## Context:\nCREATE TABLE department (budget_in_billions INTEGER)\n",
        "output": "SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average number of employees of the departments whose rank is between 10 and 15?\n## Context:\nCREATE TABLE department (num_employees INTEGER, ranking INTEGER)\n",
        "output": "SELECT AVG(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of the heads who are born outside the California state?\n## Context:\nCREATE TABLE head (name VARCHAR, born_state VARCHAR)\n",
        "output": "SELECT name FROM head WHERE born_state <> 'California'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?\n## Context:\nCREATE TABLE department (creation VARCHAR, department_id VARCHAR); CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (head_id VARCHAR, born_state VARCHAR)\n",
        "output": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of the states where at least 3 heads were born?\n## Context:\nCREATE TABLE head (born_state VARCHAR)\n",
        "output": "SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nIn which year were most departments established?\n## Context:\nCREATE TABLE department (creation VARCHAR)\n",
        "output": "SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?\n## Context:\nCREATE TABLE management (department_id VARCHAR, temporary_acting VARCHAR); CREATE TABLE department (name VARCHAR, num_employees VARCHAR, department_id VARCHAR)\n",
        "output": "SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many acting statuses are there?\n## Context:\nCREATE TABLE management (temporary_acting VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT temporary_acting) FROM management"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many departments are led by heads who are not mentioned?\n## Context:\nCREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the distinct ages of the heads who are acting?\n## Context:\nCREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)\n",
        "output": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.\n## Context:\nCREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (born_state VARCHAR, head_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)\n",
        "output": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich department has more than 1 head at a time? List the id, name and the number of heads.\n## Context:\nCREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)\n",
        "output": "SELECT T1.department_id, T1.name, COUNT(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich head's name has the substring 'Ha'? List the id and name.\n## Context:\nCREATE TABLE head (head_id VARCHAR, name VARCHAR)\n",
        "output": "SELECT head_id, name FROM head WHERE name LIKE '%Ha%'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many farms are there?\n## Context:\nCREATE TABLE farm (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM farm"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the total number of horses on farms in ascending order.\n## Context:\nCREATE TABLE farm (Total_Horses VARCHAR)\n",
        "output": "SELECT Total_Horses FROM farm ORDER BY Total_Horses"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the hosts of competitions whose theme is not \"Aliens\"?\n## Context:\nCREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)\n",
        "output": "SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the themes of farm competitions sorted by year in ascending order?\n## Context:\nCREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT Theme FROM farm_competition ORDER BY YEAR"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average number of working horses of farms with more than 5000 total number of horses?\n## Context:\nCREATE TABLE farm (Working_Horses INTEGER, Total_Horses INTEGER)\n",
        "output": "SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the maximum and minimum number of cows across all farms.\n## Context:\nCREATE TABLE farm (Cows INTEGER)\n",
        "output": "SELECT MAX(Cows), MIN(Cows) FROM farm"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many different statuses do cities have?\n## Context:\nCREATE TABLE city (Status VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT Status) FROM city"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList official names of cities in descending order of population.\n## Context:\nCREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)\n",
        "output": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the official name and status of the city with the largest population.\n## Context:\nCREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)\n",
        "output": "SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the years and the official names of the host cities of competitions.\n## Context:\nCREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Year VARCHAR, Host_city_ID VARCHAR)\n",
        "output": "SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the official names of the cities that have hosted more than one competition.\n## Context:\nCREATE TABLE farm_competition (Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR)\n",
        "output": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the status of the city that has hosted the greatest number of competitions.\n## Context:\nCREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)\n",
        "output": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the themes of competitions with host cities having populations larger than 1000.\n## Context:\nCREATE TABLE city (City_ID VARCHAR, Population INTEGER); CREATE TABLE farm_competition (Theme VARCHAR, Host_city_ID VARCHAR)\n",
        "output": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the different statuses of cities and the average population of cities with each status.\n## Context:\nCREATE TABLE city (Status VARCHAR, Population INTEGER)\n",
        "output": "SELECT Status, AVG(Population) FROM city GROUP BY Status"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the different statuses, ordered by the number of cities that have each.\n## Context:\nCREATE TABLE city (Status VARCHAR)\n",
        "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the most common type of Status across cities.\n## Context:\nCREATE TABLE city (Status VARCHAR)\n",
        "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the official names of cities that have not held any competition.\n## Context:\nCREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)\n",
        "output": "SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the status shared by cities with population bigger than 1500 and smaller than 500.\n## Context:\nCREATE TABLE city (Status VARCHAR, Population INTEGER)\n",
        "output": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the official names of cities with population bigger than 1500 or smaller than 500.\n## Context:\nCREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)\n",
        "output": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the census ranking of cities whose status are not \"Village\".\n## Context:\nCREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)\n",
        "output": "SELECT Census_Ranking FROM city WHERE Status <> \"Village\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nwhich course has most number of registered students?\n## Context:\nCREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_Id VARCHAR)\n",
        "output": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nwhat is id of students who registered some courses but the least number of courses in these students?\n## Context:\nCREATE TABLE student_course_registrations (student_id VARCHAR)\n",
        "output": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nwhat are the first name and last name of all candidates?\n## Context:\nCREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (first_name VARCHAR, last_name VARCHAR, person_id VARCHAR)\n",
        "output": "SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the id of students who never attends courses?\n## Context:\nCREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE students (student_id VARCHAR)\n",
        "output": "SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the id of students who attended some courses?\n## Context:\nCREATE TABLE student_course_attendance (student_id VARCHAR)\n",
        "output": "SELECT student_id FROM student_course_attendance"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the ids of all students for courses and what are the names of those courses?\n## Context:\nCREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR)\n",
        "output": "SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is detail of the student who most recently registered course?\n## Context:\nCREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)\n",
        "output": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many students attend course English?\n## Context:\nCREATE TABLE student_course_attendance (course_id VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many courses do the student whose id is 171 attend?\n## Context:\nCREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind id of the candidate whose email is stanley.monahan@example.org?\n## Context:\nCREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (person_id VARCHAR, email_address VARCHAR)\n",
        "output": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind id of the candidate who most recently accessed the course?\n## Context:\nCREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)\n",
        "output": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is detail of the student who registered the most number of courses?\n## Context:\nCREATE TABLE students (student_details VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)\n",
        "output": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the id of students who registered some courses and the number of their registered courses?\n## Context:\nCREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)\n",
        "output": "SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many registed students do each course have? List course name and the number of their registered students?\n## Context:\nCREATE TABLE students (student_id VARCHAR); CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)\n",
        "output": "SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind id of candidates whose assessment code is \"Pass\"?\n## Context:\nCREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)\n",
        "output": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the cell mobile number of the candidates whose assessment code is \"Fail\"?\n## Context:\nCREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (cell_mobile_number VARCHAR, person_id VARCHAR); CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)\n",
        "output": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the id of students who registered course 301?\n## Context:\nCREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)\n",
        "output": "SELECT student_id FROM student_course_attendance WHERE course_id = 301"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the id of the student who most recently registered course 301?\n## Context:\nCREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)\n",
        "output": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind distinct cities of addresses of people?\n## Context:\nCREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR)\n",
        "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind distinct cities of address of students?\n## Context:\nCREATE TABLE students (student_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR, person_id VARCHAR)\n",
        "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of courses in alphabetical order?\n## Context:\nCREATE TABLE courses (course_name VARCHAR)\n",
        "output": "SELECT course_name FROM courses ORDER BY course_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the first names of people in alphabetical order?\n## Context:\nCREATE TABLE people (first_name VARCHAR)\n",
        "output": "SELECT first_name FROM people ORDER BY first_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the id of students who registered courses or attended courses?\n## Context:\nCREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)\n",
        "output": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the id of courses which are registered or attended by student whose id is 121?\n## Context:\nCREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)\n",
        "output": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are all info of students who registered courses but not attended courses?\n## Context:\nCREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)\n",
        "output": "SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the id of students who registered course statistics in the order of registration date.\n## Context:\nCREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR, registration_date VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)\n",
        "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the id of students who attended  statistics courses in the order of attendance date.\n## Context:\nCREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)\n",
        "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nGive me the dates when the max temperature was higher than 85.\n## Context:\nCREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)\n",
        "output": "SELECT date FROM weather WHERE max_temperature_f > 85"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of stations that have latitude lower than 37.5?\n## Context:\nCREATE TABLE station (name VARCHAR, lat INTEGER)\n",
        "output": "SELECT name FROM station WHERE lat < 37.5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFor each city, return the highest latitude among its stations.\n## Context:\nCREATE TABLE station (city VARCHAR, lat INTEGER)\n",
        "output": "SELECT city, MAX(lat) FROM station GROUP BY city"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nGive me the start station and end station for the trips with the three oldest id.\n## Context:\nCREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)\n",
        "output": "SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average latitude and longitude of stations located in San Jose city?\n## Context:\nCREATE TABLE station (lat INTEGER, long INTEGER, city VARCHAR)\n",
        "output": "SELECT AVG(lat), AVG(long) FROM station WHERE city = \"San Jose\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the id of the trip that has the shortest duration?\n## Context:\nCREATE TABLE trip (id VARCHAR, duration VARCHAR)\n",
        "output": "SELECT id FROM trip ORDER BY duration LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the total and maximum duration of trips with bike id 636?\n## Context:\nCREATE TABLE trip (duration INTEGER, bike_id VARCHAR)\n",
        "output": "SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFor each zip code, return the average mean temperature of August there.\n## Context:\nCREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER, date VARCHAR)\n",
        "output": "SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFrom the trip record, find the number of unique bikes.\n## Context:\nCREATE TABLE trip (bike_id VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT bike_id) FROM trip"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the number of distinct cities the stations are located at?\n## Context:\nCREATE TABLE station (city VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT city) FROM station"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many stations does Mountain View city has?\n## Context:\nCREATE TABLE station (city VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nReturn the unique name for stations that have ever had 7 bikes available.\n## Context:\nCREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)\n",
        "output": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich start station had the most trips starting from August? Give me the name and id of the station.\n## Context:\nCREATE TABLE trip (start_station_name VARCHAR, start_station_id VARCHAR, start_date VARCHAR)\n",
        "output": "SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich bike traveled the most often in zip code 94002?\n## Context:\nCREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)\n",
        "output": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many days had both mean humidity above 50 and mean visibility above 8?\n## Context:\nCREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the latitude, longitude, city of the station from which the shortest trip started?\n## Context:\nCREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the ids of stations that are located in San Francisco and have average bike availability above 10.\n## Context:\nCREATE TABLE status (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER)\n",
        "output": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names and ids of stations that had more than 14 bikes available on average or were installed in December?\n## Context:\nCREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE station (name VARCHAR, id VARCHAR, installation_date VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)\n",
        "output": "SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE \"12/%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the 3 most common cloud cover rates in the region of zip code 94107?\n## Context:\nCREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)\n",
        "output": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the zip code in which the average mean sea level pressure is the lowest?\n## Context:\nCREATE TABLE weather (zip_code VARCHAR, mean_sea_level_pressure_inches INTEGER)\n",
        "output": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average bike availability in stations that are not located in Palo Alto?\n## Context:\nCREATE TABLE status (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR); CREATE TABLE station (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR)\n",
        "output": "SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = \"Palo Alto\")"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average longitude of stations that never had bike availability more than 10?\n## Context:\nCREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)\n",
        "output": "SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhen and in what zip code did max temperature reach 80?\n## Context:\nCREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)\n",
        "output": "SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nGive me ids for all the trip that took place in a zip code area with average mean temperature above 60.\n## Context:\nCREATE TABLE trip (id VARCHAR, zip_code VARCHAR); CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER)\n",
        "output": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFor each zip code, return how many times max wind speed reached 25?\n## Context:\nCREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)\n",
        "output": "SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nOn which day and in which zip code was the min dew point lower than any day in zip code 94107?\n## Context:\nCREATE TABLE weather (date VARCHAR, zip_code VARCHAR, min_dew_point_f INTEGER)\n",
        "output": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFor each trip, return its ending station's installation date.\n## Context:\nCREATE TABLE station (installation_date VARCHAR, id VARCHAR); CREATE TABLE trip (id VARCHAR, end_station_id VARCHAR)\n",
        "output": "SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich trip started from the station with the largest dock count? Give me the trip id.\n## Context:\nCREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)\n",
        "output": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nCount the number of trips that did not end in San Francisco city.\n## Context:\nCREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> \"San Francisco\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nIn zip code 94107, on which day neither Fog nor Rain was not observed?\n## Context:\nCREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)\n",
        "output": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> \"Fog\" AND EVENTS <> \"Rain\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the ids of stations that have latitude above 37.4 and never had bike availability below 7?\n## Context:\nCREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)\n",
        "output": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are names of stations that have average bike availability above 10 and are not located in San Jose city?\n## Context:\nCREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR); CREATE TABLE station (name VARCHAR, city VARCHAR, bikes_available INTEGER)\n",
        "output": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the name, latitude, and city of the station with the lowest latitude?\n## Context:\nCREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)\n",
        "output": "SELECT name, lat, city FROM station ORDER BY lat LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?\n## Context:\nCREATE TABLE weather (date VARCHAR, mean_temperature_f VARCHAR, mean_humidity VARCHAR, max_gust_speed_mph VARCHAR)\n",
        "output": "SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name and the number of stations for all the cities that have at least 15 stations.\n## Context:\nCREATE TABLE station (city VARCHAR)\n",
        "output": "SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the ids and names of stations from which at least 200 trips started.\n## Context:\nCREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)\n",
        "output": "SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the zip code in which the average mean visibility is lower than 10.\n## Context:\nCREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)\n",
        "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all the cities in a decreasing order of each city's stations' highest latitude.\n## Context:\nCREATE TABLE station (city VARCHAR, lat INTEGER)\n",
        "output": "SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.\n## Context:\nCREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)\n",
        "output": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the ids and durations of the trips with the top 3 durations?\n## Context:\nCREATE TABLE trip (id VARCHAR, duration VARCHAR)\n",
        "output": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFor each station, return its longitude and the average duration of trips that started from the station.\n## Context:\nCREATE TABLE station (name VARCHAR, long VARCHAR, id VARCHAR); CREATE TABLE trip (duration INTEGER, start_station_id VARCHAR)\n",
        "output": "SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFor each station, find its latitude and the minimum duration of trips that ended at the station.\n## Context:\nCREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all the distinct stations from which a trip of duration below 100 started.\n## Context:\nCREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)\n",
        "output": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind all the zip codes in which the max dew point have never reached 70.\n## Context:\nCREATE TABLE weather (zip_code VARCHAR, max_dew_point_f VARCHAR)\n",
        "output": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.\n## Context:\nCREATE TABLE trip (id VARCHAR, duration INTEGER, zip_code VARCHAR)\n",
        "output": "SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the dates in which the mean sea level pressure was between 30.3 and 31?\n## Context:\nCREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)\n",
        "output": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.\n## Context:\nCREATE TABLE weather (date VARCHAR, max_temperature_f VARCHAR, min_temperature_f VARCHAR)\n",
        "output": "SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the id and name of the stations that have ever had more than 12 bikes available?\n## Context:\nCREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)\n",
        "output": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nGive me the zip code where the average mean humidity is below 70 and at least 100 trips took place.\n## Context:\nCREATE TABLE weather (zip_code VARCHAR, mean_humidity INTEGER); CREATE TABLE trip (zip_code VARCHAR, mean_humidity INTEGER)\n",
        "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?\n## Context:\nCREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)\n",
        "output": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many trips started from Mountain View city and ended at Palo Alto city?\n## Context:\nCREATE TABLE station (city VARCHAR, id VARCHAR); CREATE TABLE trip (end_station_id VARCHAR, id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR); CREATE TABLE trip (start_station_id VARCHAR, id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average latitude and longitude of the starting points of all trips?\n## Context:\nCREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)\n",
        "output": "SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many books are there?\n## Context:\nCREATE TABLE book (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM book"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the writers of the books in ascending alphabetical order.\n## Context:\nCREATE TABLE book (Writer VARCHAR)\n",
        "output": "SELECT Writer FROM book ORDER BY Writer"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the titles of the books in ascending order of issues.\n## Context:\nCREATE TABLE book (Title VARCHAR, Issues VARCHAR)\n",
        "output": "SELECT Title FROM book ORDER BY Issues"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the titles of the books whose writer is not \"Elaine Lee\"?\n## Context:\nCREATE TABLE book (Title VARCHAR, Writer VARCHAR)\n",
        "output": "SELECT Title FROM book WHERE Writer <> \"Elaine Lee\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the title and issues of the books?\n## Context:\nCREATE TABLE book (Title VARCHAR, Issues VARCHAR)\n",
        "output": "SELECT Title, Issues FROM book"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the dates of publications in descending order of price?\n## Context:\nCREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)\n",
        "output": "SELECT Publication_Date FROM publication ORDER BY Price DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the distinct publishers of publications with price higher than 5000000?\n## Context:\nCREATE TABLE publication (Publisher VARCHAR, Price INTEGER)\n",
        "output": "SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the publisher of the publication with the highest price.\n## Context:\nCREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)\n",
        "output": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the publication dates of publications with 3 lowest prices.\n## Context:\nCREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)\n",
        "output": "SELECT Publication_Date FROM publication ORDER BY Price LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the title and publication dates of books.\n## Context:\nCREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Publication_Date VARCHAR, Book_ID VARCHAR)\n",
        "output": "SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow writers who have published a book with price more than 4000000.\n## Context:\nCREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)\n",
        "output": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the titles of books in descending order of publication price.\n## Context:\nCREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)\n",
        "output": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow publishers that have more than one publication.\n## Context:\nCREATE TABLE publication (Publisher VARCHAR)\n",
        "output": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow different publishers together with the number of publications they have.\n## Context:\nCREATE TABLE publication (Publisher VARCHAR)\n",
        "output": "SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the most common publication date.\n## Context:\nCREATE TABLE publication (Publication_Date VARCHAR)\n",
        "output": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the writers who have written more than one book.\n## Context:\nCREATE TABLE book (Writer VARCHAR)\n",
        "output": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the titles of books that are not published.\n## Context:\nCREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Title VARCHAR, Book_ID VARCHAR)\n",
        "output": "SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.\n## Context:\nCREATE TABLE publication (Publisher VARCHAR, Price INTEGER)\n",
        "output": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the number of distinct publication dates?\n## Context:\nCREATE TABLE publication (Publication_Date VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT Publication_Date) FROM publication"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the prices of publications whose publisher is either \"Person\" or \"Wiley\"\n## Context:\nCREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)\n",
        "output": "SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many actors are there?\n## Context:\nCREATE TABLE actor (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM actor"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of actors in ascending alphabetical order.\n## Context:\nCREATE TABLE actor (Name VARCHAR)\n",
        "output": "SELECT Name FROM actor ORDER BY Name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the characters and duration of actors?\n## Context:\nCREATE TABLE actor (Character VARCHAR, Duration VARCHAR)\n",
        "output": "SELECT Character, Duration FROM actor"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of actors whose age is not 20.\n## Context:\nCREATE TABLE actor (Name VARCHAR, Age VARCHAR)\n",
        "output": "SELECT Name FROM actor WHERE Age <> 20"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the characters of actors in descending order of age?\n## Context:\nCREATE TABLE actor (Character VARCHAR, age VARCHAR)\n",
        "output": "SELECT Character FROM actor ORDER BY age DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the duration of the oldest actor?\n## Context:\nCREATE TABLE actor (Duration VARCHAR, Age VARCHAR)\n",
        "output": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of musicals with nominee \"Bob Fosse\"?\n## Context:\nCREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)\n",
        "output": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the distinct nominees of the musicals with the award that is not \"Tony Award\"?\n## Context:\nCREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)\n",
        "output": "SELECT DISTINCT Nominee FROM musical WHERE Award <> \"Tony Award\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names of actors and names of musicals they are in.\n## Context:\nCREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)\n",
        "output": "SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names of actors that have appeared in musical with name \"The Phantom of the Opera\".\n## Context:\nCREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Musical_ID VARCHAR, Name VARCHAR)\n",
        "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names of actors in descending order of the year their musical is awarded.\n## Context:\nCREATE TABLE musical (Musical_ID VARCHAR, Year VARCHAR); CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR)\n",
        "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names of musicals and the number of actors who have appeared in the musicals.\n## Context:\nCREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)\n",
        "output": "SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names of musicals which have at least three actors.\n## Context:\nCREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)\n",
        "output": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow different nominees and the number of musicals they have been nominated.\n## Context:\nCREATE TABLE musical (Nominee VARCHAR)\n",
        "output": "SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the nominee who has been nominated the greatest number of times.\n## Context:\nCREATE TABLE musical (Nominee VARCHAR)\n",
        "output": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the most common result of the musicals.\n## Context:\nCREATE TABLE musical (RESULT VARCHAR)\n",
        "output": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the nominees that have been nominated more than two musicals.\n## Context:\nCREATE TABLE musical (Nominee VARCHAR)\n",
        "output": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of musicals that do not have actors.\n## Context:\nCREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)\n",
        "output": "SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".\n## Context:\nCREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)\n",
        "output": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".\n## Context:\nCREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)\n",
        "output": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the emails of the user named \"Mary\".\n## Context:\nCREATE TABLE user_profiles (email VARCHAR, name VARCHAR)\n",
        "output": "SELECT email FROM user_profiles WHERE name = 'Mary'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the partition id of the user named \"Iron Man\".\n## Context:\nCREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)\n",
        "output": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many users are there?\n## Context:\nCREATE TABLE user_profiles (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM user_profiles"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many followers does each user have?\n## Context:\nCREATE TABLE follows (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM follows"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of followers for each user.\n## Context:\nCREATE TABLE follows (f1 VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM follows GROUP BY f1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of tweets in record.\n## Context:\nCREATE TABLE tweets (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM tweets"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of users who posted some tweets.\n## Context:\nCREATE TABLE tweets (UID VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT UID) FROM tweets"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and email of the user whose name contains the word \u2018Swift\u2019.\n## Context:\nCREATE TABLE user_profiles (name VARCHAR, email VARCHAR)\n",
        "output": "SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.\n## Context:\nCREATE TABLE user_profiles (name VARCHAR, email VARCHAR)\n",
        "output": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nReturn the text of tweets about the topic 'intern'.\n## Context:\nCREATE TABLE tweets (text VARCHAR)\n",
        "output": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and email of the users who have more than 1000 followers.\n## Context:\nCREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)\n",
        "output": "SELECT name, email FROM user_profiles WHERE followers > 1000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".\n## Context:\nCREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)\n",
        "output": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and email for the users who have more than one follower.\n## Context:\nCREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, uid VARCHAR)\n",
        "output": "SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of users who have more than one tweet.\n## Context:\nCREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)\n",
        "output": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the id of users who are followed by Mary and Susan.\n## Context:\nCREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)\n",
        "output": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Susan\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the id of users who are followed by Mary or Susan.\n## Context:\nCREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)\n",
        "output": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" OR T1.name = \"Susan\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the user who has the largest number of followers.\n## Context:\nCREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)\n",
        "output": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and email of the user followed by the least number of people.\n## Context:\nCREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)\n",
        "output": "SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name and number of followers for each user, and sort the results by the number of followers in descending order.\n## Context:\nCREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)\n",
        "output": "SELECT name, followers FROM user_profiles ORDER BY followers DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of 5 users followed by the largest number of other users.\n## Context:\nCREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)\n",
        "output": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the text of all tweets in the order of date.\n## Context:\nCREATE TABLE tweets (text VARCHAR, createdate VARCHAR)\n",
        "output": "SELECT text FROM tweets ORDER BY createdate"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of each user and number of tweets tweeted by each of them.\n## Context:\nCREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)\n",
        "output": "SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and partition id for users who tweeted less than twice.\n## Context:\nCREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)\n",
        "output": "SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the user who tweeted more than once, and number of tweets tweeted by them.\n## Context:\nCREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)\n",
        "output": "SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the average number of followers for the users who do not have any tweet.\n## Context:\nCREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)\n",
        "output": "SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the average number of followers for the users who had some tweets.\n## Context:\nCREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)\n",
        "output": "SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the maximum and total number of followers of all users.\n## Context:\nCREATE TABLE user_profiles (followers INTEGER)\n",
        "output": "SELECT MAX(followers), SUM(followers) FROM user_profiles"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all the catalog entries.\n## Context:\nCREATE TABLE catalog_contents (catalog_entry_name VARCHAR)\n",
        "output": "SELECT DISTINCT (catalog_entry_name) FROM catalog_contents"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the list of attribute data types possessed by more than 3 attribute definitions.\n## Context:\nCREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR)\n",
        "output": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the attribute data type of the attribute with name \"Green\"?\n## Context:\nCREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)\n",
        "output": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and level of catalog structure with level between 5 and 10.\n## Context:\nCREATE TABLE Catalog_Structure (catalog_level_name VARCHAR, catalog_level_number INTEGER)\n",
        "output": "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind all the catalog publishers whose name contains \"Murray\"\n## Context:\nCREATE TABLE catalogs (catalog_publisher VARCHAR)\n",
        "output": "SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich catalog publisher has published the most catalogs?\n## Context:\nCREATE TABLE catalogs (catalog_publisher VARCHAR)\n",
        "output": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names and publication dates of all catalogs that have catalog level number greater than 5.\n## Context:\nCREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)\n",
        "output": "SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the entry names of catalog with the attribute possessed by most entries.\n## Context:\nCREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value VARCHAR)\n",
        "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the entry name of the most expensive catalog (in USD)?\n## Context:\nCREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)\n",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the level name of the cheapest catalog (in USD)?\n## Context:\nCREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)\n",
        "output": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the average and minimum price (in Euro) of all products?\n## Context:\nCREATE TABLE catalog_contents (price_in_euros INTEGER)\n",
        "output": "SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the product with the highest height? Give me the catalog entry name.\n## Context:\nCREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)\n",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the product that has the smallest capacity.\n## Context:\nCREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)\n",
        "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all the products whose stock number starts with \"2\".\n## Context:\nCREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)\n",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of catalog entries with level number 8.\n## Context:\nCREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, catalog_level_number VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR)\n",
        "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of the products with length smaller than 3 or height greater than 5.\n## Context:\nCREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)\n",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and attribute ID of the attribute definitions with attribute value 0.\n## Context:\nCREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Attribute_Definitions (attribute_name VARCHAR, attribute_id VARCHAR)\n",
        "output": "SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and capacity of products with price greater than 700 (in USD).\n## Context:\nCREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)\n",
        "output": "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the dates on which more than one revisions were made.\n## Context:\nCREATE TABLE Catalogs (date_of_latest_revision VARCHAR)\n",
        "output": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many products are there in the records?\n## Context:\nCREATE TABLE catalog_contents (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM catalog_contents"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nName all the products with next entry ID greater than 8.\n## Context:\nCREATE TABLE catalog_contents (catalog_entry_name VARCHAR, next_entry_id INTEGER)\n",
        "output": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many aircrafts do we have?\n## Context:\nCREATE TABLE Aircraft (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Aircraft"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow name and distance for all aircrafts.\n## Context:\nCREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)\n",
        "output": "SELECT name, distance FROM Aircraft"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow ids for all aircrafts with more than 1000 distance.\n## Context:\nCREATE TABLE Aircraft (aid VARCHAR, distance INTEGER)\n",
        "output": "SELECT aid FROM Aircraft WHERE distance > 1000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many aircrafts have distance between 1000 and 5000?\n## Context:\nCREATE TABLE Aircraft (distance INTEGER)\n",
        "output": "SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name and distance for aircraft with id 12?\n## Context:\nCREATE TABLE Aircraft (name VARCHAR, distance VARCHAR, aid VARCHAR)\n",
        "output": "SELECT name, distance FROM Aircraft WHERE aid = 12"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the minimum, average, and maximum distance of all aircrafts.\n## Context:\nCREATE TABLE Aircraft (distance INTEGER)\n",
        "output": "SELECT MIN(distance), AVG(distance), MAX(distance) FROM Aircraft"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the id and name of the aircraft with the maximum distance.\n## Context:\nCREATE TABLE Aircraft (aid VARCHAR, name VARCHAR, distance VARCHAR)\n",
        "output": "SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name of aircrafts with top three lowest distances.\n## Context:\nCREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)\n",
        "output": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names for all aircrafts with distances more than the average.\n## Context:\nCREATE TABLE Aircraft (name VARCHAR, distance INTEGER)\n",
        "output": "SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many employees do we have?\n## Context:\nCREATE TABLE Employee (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Employee"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow name and salary for all employees sorted by salary.\n## Context:\nCREATE TABLE Employee (name VARCHAR, salary VARCHAR)\n",
        "output": "SELECT name, salary FROM Employee ORDER BY salary"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow ids for all employees with at least 100000 salary.\n## Context:\nCREATE TABLE Employee (eid VARCHAR, salary INTEGER)\n",
        "output": "SELECT eid FROM Employee WHERE salary > 100000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many employees have salary between 100000 and 200000?\n## Context:\nCREATE TABLE Employee (salary INTEGER)\n",
        "output": "SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name and salary for employee with id 242518965?\n## Context:\nCREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)\n",
        "output": "SELECT name, salary FROM Employee WHERE eid = 242518965"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is average and maximum salary of all employees.\n## Context:\nCREATE TABLE Employee (salary INTEGER)\n",
        "output": "SELECT AVG(salary), MAX(salary) FROM Employee"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the id and name of the employee with maximum salary.\n## Context:\nCREATE TABLE Employee (eid VARCHAR, name VARCHAR, salary VARCHAR)\n",
        "output": "SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name of employees with three lowest salaries.\n## Context:\nCREATE TABLE Employee (name VARCHAR, salary VARCHAR)\n",
        "output": "SELECT name FROM Employee ORDER BY salary LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names for all employees with salary more than the average.\n## Context:\nCREATE TABLE Employee (name VARCHAR, salary INTEGER)\n",
        "output": "SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the id and salary of Mark Young.\n## Context:\nCREATE TABLE Employee (eid VARCHAR, salary VARCHAR, name VARCHAR)\n",
        "output": "SELECT eid, salary FROM Employee WHERE name = 'Mark Young'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many flights do we have?\n## Context:\nCREATE TABLE Flight (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Flight"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow flight number, origin, destination of all flights in the alphabetical order of the departure cities.\n## Context:\nCREATE TABLE Flight (flno VARCHAR, origin VARCHAR, destination VARCHAR)\n",
        "output": "SELECT flno, origin, destination FROM Flight ORDER BY origin"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all flight number from Los Angeles.\n## Context:\nCREATE TABLE Flight (flno VARCHAR, origin VARCHAR)\n",
        "output": "SELECT flno FROM Flight WHERE origin = \"Los Angeles\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow origins of all flights with destination Honolulu.\n## Context:\nCREATE TABLE Flight (origin VARCHAR, destination VARCHAR)\n",
        "output": "SELECT origin FROM Flight WHERE destination = \"Honolulu\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow me the departure date and arrival date for all flights from Los Angeles to Honolulu.\n## Context:\nCREATE TABLE Flight (departure_date VARCHAR, arrival_date VARCHAR, origin VARCHAR, destination VARCHAR)\n",
        "output": "SELECT departure_date, arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow flight number for all flights with more than 2000 distance.\n## Context:\nCREATE TABLE Flight (flno VARCHAR, distance INTEGER)\n",
        "output": "SELECT flno FROM Flight WHERE distance > 2000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average price for flights from Los Angeles to Honolulu.\n## Context:\nCREATE TABLE Flight (price INTEGER, origin VARCHAR, destination VARCHAR)\n",
        "output": "SELECT AVG(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow origin and destination for flights with price higher than 300.\n## Context:\nCREATE TABLE Flight (origin VARCHAR, destination VARCHAR, price INTEGER)\n",
        "output": "SELECT origin, destination FROM Flight WHERE price > 300"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the flight number and distance of the flight with maximum price.\n## Context:\nCREATE TABLE Flight (flno VARCHAR, distance VARCHAR, price VARCHAR)\n",
        "output": "SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the flight number of flights with three lowest distances.\n## Context:\nCREATE TABLE Flight (flno VARCHAR, distance VARCHAR)\n",
        "output": "SELECT flno FROM Flight ORDER BY distance LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average distance and average price for flights from Los Angeles.\n## Context:\nCREATE TABLE Flight (distance INTEGER, price INTEGER, origin VARCHAR)\n",
        "output": "SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = \"Los Angeles\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all origins and the number of flights from each origin.\n## Context:\nCREATE TABLE Flight (origin VARCHAR)\n",
        "output": "SELECT origin, COUNT(*) FROM Flight GROUP BY origin"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all destinations and the number of flights to each destination.\n## Context:\nCREATE TABLE Flight (destination VARCHAR)\n",
        "output": "SELECT destination, COUNT(*) FROM Flight GROUP BY destination"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich origin has most number of flights?\n## Context:\nCREATE TABLE Flight (origin VARCHAR)\n",
        "output": "SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich destination has least number of flights?\n## Context:\nCREATE TABLE Flight (destination VARCHAR)\n",
        "output": "SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the aircraft name for the flight with number 99\n## Context:\nCREATE TABLE Flight (aid VARCHAR, flno VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)\n",
        "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all flight numbers with aircraft Airbus A340-300.\n## Context:\nCREATE TABLE Flight (flno VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)\n",
        "output": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow aircraft names and number of flights for each aircraft.\n## Context:\nCREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)\n",
        "output": "SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names for all aircraft with at least two flights.\n## Context:\nCREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)\n",
        "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many employees have certificate.\n## Context:\nCREATE TABLE Certificate (eid VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT eid) FROM Certificate"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow ids for all employees who don't have a certificate.\n## Context:\nCREATE TABLE Employee (eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR)\n",
        "output": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names for all aircrafts of which John Williams has certificates.\n## Context:\nCREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Employee (eid VARCHAR, name VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)\n",
        "output": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names for all employees who have certificate of Boeing 737-800.\n## Context:\nCREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)\n",
        "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.\n## Context:\nCREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)\n",
        "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names for all employees who do not have certificate of Boeing 737-800.\n## Context:\nCREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Employee (name VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)\n",
        "output": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name of aircraft which fewest people have its certificate.\n## Context:\nCREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)\n",
        "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.\n## Context:\nCREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR, distance INTEGER)\n",
        "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY COUNT(*) >= 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nwhat is the salary and name of the employee who has the most number of aircraft certificates?\n## Context:\nCREATE TABLE Certificate (eid VARCHAR); CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)\n",
        "output": "SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?\n## Context:\nCREATE TABLE Aircraft (aid VARCHAR, distance INTEGER); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)\n",
        "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many allergies are there?\n## Context:\nCREATE TABLE Allergy_type (allergy VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT allergy) FROM Allergy_type"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many different allergy types exist?\n## Context:\nCREATE TABLE Allergy_type (allergytype VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT allergytype) FROM Allergy_type"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all allergy types.\n## Context:\nCREATE TABLE Allergy_type (allergytype VARCHAR)\n",
        "output": "SELECT DISTINCT allergytype FROM Allergy_type"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all allergies and their types.\n## Context:\nCREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)\n",
        "output": "SELECT allergy, allergytype FROM Allergy_type"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all allergies with type food.\n## Context:\nCREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)\n",
        "output": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the type of allergy Cat?\n## Context:\nCREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)\n",
        "output": "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many allergies have type animal?\n## Context:\nCREATE TABLE Allergy_type (allergytype VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Allergy_type WHERE allergytype = \"animal\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all allergy types and the number of allergies in each type.\n## Context:\nCREATE TABLE Allergy_type (allergytype VARCHAR)\n",
        "output": "SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich allergy type has most number of allergies?\n## Context:\nCREATE TABLE Allergy_type (allergytype VARCHAR)\n",
        "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich allergy type has least number of allergies?\n## Context:\nCREATE TABLE Allergy_type (allergytype VARCHAR)\n",
        "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many students are there?\n## Context:\nCREATE TABLE Student (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Student"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow first name and last name for all students.\n## Context:\nCREATE TABLE Student (Fname VARCHAR, Lname VARCHAR)\n",
        "output": "SELECT Fname, Lname FROM Student"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many different advisors are listed?\n## Context:\nCREATE TABLE Student (advisor VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT advisor) FROM Student"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all majors.\n## Context:\nCREATE TABLE Student (Major VARCHAR)\n",
        "output": "SELECT DISTINCT Major FROM Student"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all cities where students live.\n## Context:\nCREATE TABLE Student (city_code VARCHAR)\n",
        "output": "SELECT DISTINCT city_code FROM Student"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow first name, last name, age for all female students. Their sex is F.\n## Context:\nCREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Sex VARCHAR)\n",
        "output": "SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow student ids for all male students.\n## Context:\nCREATE TABLE Student (StuID VARCHAR, Sex VARCHAR)\n",
        "output": "SELECT StuID FROM Student WHERE Sex = 'M'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many students are age 18?\n## Context:\nCREATE TABLE Student (age VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Student WHERE age = 18"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all student ids who are older than 20.\n## Context:\nCREATE TABLE Student (StuID VARCHAR, age INTEGER)\n",
        "output": "SELECT StuID FROM Student WHERE age > 20"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich city does the student whose last name is \"Kim\" live in?\n## Context:\nCREATE TABLE Student (city_code VARCHAR, LName VARCHAR)\n",
        "output": "SELECT city_code FROM Student WHERE LName = \"Kim\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWho is the advisor of student with ID 1004?\n## Context:\nCREATE TABLE Student (Advisor VARCHAR, StuID VARCHAR)\n",
        "output": "SELECT Advisor FROM Student WHERE StuID = 1004"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many students live in HKG or CHI?\n## Context:\nCREATE TABLE Student (city_code VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the minimum, average, and maximum age of all students.\n## Context:\nCREATE TABLE Student (age INTEGER)\n",
        "output": "SELECT MIN(age), AVG(age), MAX(age) FROM Student"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the last name of the youngest student?\n## Context:\nCREATE TABLE Student (LName VARCHAR, age INTEGER)\n",
        "output": "SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the student id of the oldest student.\n## Context:\nCREATE TABLE Student (StuID VARCHAR, age INTEGER)\n",
        "output": "SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all majors and corresponding number of students.\n## Context:\nCREATE TABLE Student (major VARCHAR)\n",
        "output": "SELECT major, COUNT(*) FROM Student GROUP BY major"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich major has most number of students?\n## Context:\nCREATE TABLE Student (major VARCHAR)\n",
        "output": "SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all ages and corresponding number of students.\n## Context:\nCREATE TABLE Student (age VARCHAR)\n",
        "output": "SELECT age, COUNT(*) FROM Student GROUP BY age"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the average age for male and female students.\n## Context:\nCREATE TABLE Student (sex VARCHAR, age INTEGER)\n",
        "output": "SELECT AVG(age), sex FROM Student GROUP BY sex"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all cities and corresponding number of students.\n## Context:\nCREATE TABLE Student (city_code VARCHAR)\n",
        "output": "SELECT city_code, COUNT(*) FROM Student GROUP BY city_code"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all advisors and corresponding number of students.\n## Context:\nCREATE TABLE Student (advisor VARCHAR)\n",
        "output": "SELECT advisor, COUNT(*) FROM Student GROUP BY advisor"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich advisor has most number of students?\n## Context:\nCREATE TABLE Student (advisor VARCHAR)\n",
        "output": "SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many students have cat allergies?\n## Context:\nCREATE TABLE Has_allergy (Allergy VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Has_allergy WHERE Allergy = \"Cat\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all student IDs who have at least two allergies.\n## Context:\nCREATE TABLE Has_allergy (StuID VARCHAR)\n",
        "output": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the student ids of students who don't have any allergies?\n## Context:\nCREATE TABLE Has_allergy (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)\n",
        "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many female students have milk or egg allergies?\n## Context:\nCREATE TABLE Student (StuID VARCHAR, sex VARCHAR); CREATE TABLE has_allergy (StuID VARCHAR, allergy VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many students have a food allergy?\n## Context:\nCREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich allergy has most number of students affected?\n## Context:\nCREATE TABLE Has_allergy (Allergy VARCHAR)\n",
        "output": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all allergies with number of students affected.\n## Context:\nCREATE TABLE Has_allergy (Allergy VARCHAR)\n",
        "output": "SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all allergy type with number of students affected.\n## Context:\nCREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)\n",
        "output": "SELECT T2.allergytype, COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the last name and age of the student who has allergy to both milk and cat.\n## Context:\nCREATE TABLE Has_allergy (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR)\n",
        "output": "SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.\n## Context:\nCREATE TABLE Has_allergy (Allergy VARCHAR, StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR); CREATE TABLE Allergy_type (Allergy VARCHAR, AllergyType VARCHAR)\n",
        "output": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the first name and gender of the student who has allergy to milk but not cat.\n## Context:\nCREATE TABLE Student (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Has_allergy (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR)\n",
        "output": "SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the average age of the students who have allergies with food and animal types.\n## Context:\nCREATE TABLE Student (age INTEGER, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)\n",
        "output": "SELECT AVG(age) FROM Student WHERE StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"animal\")"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the first and last name of the students who do not have any food type allergy.\n## Context:\nCREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)\n",
        "output": "SELECT fname, lname FROM Student WHERE NOT StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of male (sex is 'M') students who have some food type allery.\n## Context:\nCREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Student (sex VARCHAR, StuID VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the different first names and cities of the students who have allergy to milk or cat.\n## Context:\nCREATE TABLE Has_Allergy (stuid VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, city_code VARCHAR, stuid VARCHAR)\n",
        "output": "SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of students who are older than 18 and do not have allergy to either food or animal.\n## Context:\nCREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Student (age VARCHAR, StuID VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Student WHERE age > 18 AND NOT StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" OR T2.allergytype = \"animal\")"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the first name and major of the students who are not allegry to soy.\n## Context:\nCREATE TABLE Has_allergy (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR)\n",
        "output": "SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nA list of the top 5 countries by number of invoices. List country name and number of invoices.\n## Context:\nCREATE TABLE invoices (billing_country VARCHAR)\n",
        "output": "SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nA list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.\n## Context:\nCREATE TABLE invoices (billing_country VARCHAR, total INTEGER)\n",
        "output": "SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nA list of the top 10 countries by average invoice size. List country name and average invoice size.\n## Context:\nCREATE TABLE invoices (billing_country VARCHAR, total INTEGER)\n",
        "output": "SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind out 5 customers who most recently purchased something. List customers' first and last name.\n## Context:\nCREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR, invoice_date VARCHAR)\n",
        "output": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.\n## Context:\nCREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)\n",
        "output": "SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the top 10 customers by total gross sales. List customers' first and last name and total gross sales.\n## Context:\nCREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the top 5 genres by number of tracks. List genres name and total tracks.\n## Context:\nCREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList every album's title.\n## Context:\nCREATE TABLE albums (title VARCHAR)\n",
        "output": "SELECT title FROM albums"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList every album ordered by album title in ascending order.\n## Context:\nCREATE TABLE albums (title VARCHAR)\n",
        "output": "SELECT title FROM albums ORDER BY title"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList every album whose title starts with A in alphabetical order.\n## Context:\nCREATE TABLE albums (title VARCHAR)\n",
        "output": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the customers first and last name of 10 least expensive invoices.\n## Context:\nCREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)\n",
        "output": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList total amount of  invoice from Chicago, IL.\n## Context:\nCREATE TABLE invoices (total INTEGER, billing_city VARCHAR, billing_state VARCHAR)\n",
        "output": "SELECT SUM(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the number of invoices from Chicago, IL.\n## Context:\nCREATE TABLE invoices (billing_city VARCHAR, billing_state VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the number of invoices from the US, grouped by state.\n## Context:\nCREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)\n",
        "output": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the state in the US with the most invoices.\n## Context:\nCREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)\n",
        "output": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the number of invoices and the invoice total from California.\n## Context:\nCREATE TABLE invoices (billing_state VARCHAR, total INTEGER)\n",
        "output": "SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = \"CA\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList Aerosmith's albums.\n## Context:\nCREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)\n",
        "output": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many albums does Billy Cobham has?\n## Context:\nCREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (artist_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nEduardo Martins is a customer at which company?\n## Context:\nCREATE TABLE customers (company VARCHAR, first_name VARCHAR, last_name VARCHAR)\n",
        "output": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is Astrid Gruber's email and phone number?\n## Context:\nCREATE TABLE customers (email VARCHAR, phone VARCHAR, first_name VARCHAR, last_name VARCHAR)\n",
        "output": "SELECT email, phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many customers live in Prague city?\n## Context:\nCREATE TABLE customers (city VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM customers WHERE city = \"Prague\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many customers in state of CA?\n## Context:\nCREATE TABLE customers (state VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM customers WHERE state = \"CA\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat country does Roberto Almeida live?\n## Context:\nCREATE TABLE customers (country VARCHAR, first_name VARCHAR, last_name VARCHAR)\n",
        "output": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of albums that are released by aritist whose name has 'Led'\n## Context:\nCREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)\n",
        "output": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many customers does Steve Johnson support?\n## Context:\nCREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the title, phone and hire date of Nancy Edwards?\n## Context:\nCREATE TABLE employees (title VARCHAR, phone VARCHAR, hire_date VARCHAR, first_name VARCHAR, last_name VARCHAR)\n",
        "output": "SELECT title, phone, hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nfind the full name of employees who report to Nancy Edwards?\n## Context:\nCREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, reports_to VARCHAR)\n",
        "output": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the address of employee Nancy Edwards?\n## Context:\nCREATE TABLE employees (address VARCHAR, first_name VARCHAR, last_name VARCHAR)\n",
        "output": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the full name of employee who supported the most number of customers.\n## Context:\nCREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)\n",
        "output": "SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many employees are living in Canada?\n## Context:\nCREATE TABLE employees (country VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM employees WHERE country = \"Canada\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is employee Nancy Edwards's phone number?\n## Context:\nCREATE TABLE employees (phone VARCHAR, first_name VARCHAR, last_name VARCHAR)\n",
        "output": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWho is the youngest employee in the company? List employee's first and last name.\n## Context:\nCREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)\n",
        "output": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList top 10 employee work longest in the company. List employee's first and last name.\n## Context:\nCREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR)\n",
        "output": "SELECT first_name, last_name FROM employees ORDER BY hire_date LIMIT 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of employees whose title is IT Staff from each city?\n## Context:\nCREATE TABLE employees (city VARCHAR, title VARCHAR)\n",
        "output": "SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.\n## Context:\nCREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE employees (reports_to VARCHAR)\n",
        "output": "SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY COUNT(T1.reports_to) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many orders does Lucas Mancini has?\n## Context:\nCREATE TABLE invoices (customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the total amount of money spent by Lucas Mancini?\n## Context:\nCREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)\n",
        "output": "SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all media types.\n## Context:\nCREATE TABLE media_types (name VARCHAR)\n",
        "output": "SELECT name FROM media_types"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all different genre types.\n## Context:\nCREATE TABLE genres (name VARCHAR)\n",
        "output": "SELECT DISTINCT name FROM genres"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of all playlist.\n## Context:\nCREATE TABLE playlists (name VARCHAR)\n",
        "output": "SELECT name FROM playlists"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWho is the composer of track Fast As a Shark?\n## Context:\nCREATE TABLE tracks (composer VARCHAR, name VARCHAR)\n",
        "output": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow long does track Fast As a Shark has?\n## Context:\nCREATE TABLE tracks (milliseconds VARCHAR, name VARCHAR)\n",
        "output": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of tracks whose genre is Rock?\n## Context:\nCREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)\n",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is title of album which track Balls to the Wall belongs to?\n## Context:\nCREATE TABLE tracks (genre_id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList name of all tracks in Balls to the Wall.\n## Context:\nCREATE TABLE tracks (name VARCHAR, genre_id VARCHAR); CREATE TABLE albums (id VARCHAR, title VARCHAR)\n",
        "output": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList title of albums have the number of tracks greater than 10.\n## Context:\nCREATE TABLE tracks (album_id VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of tracks belongs to genre Rock and whose media type is MPEG audio file.\n## Context:\nCREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)\n",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of tracks belongs to genre Rock or media type is MPEG audio file.\n## Context:\nCREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)\n",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of tracks belongs to genre Rock or genre Jazz.\n## Context:\nCREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)\n",
        "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of all tracks in the playlists of Movies.\n## Context:\nCREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of playlist which has number of tracks greater than 100.\n## Context:\nCREATE TABLE playlist_tracks (playlist_id VARCHAR, track_id VARCHAR); CREATE TABLE playlists (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING COUNT(T1.track_id) > 100"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all tracks bought by customer Daan Peeters.\n## Context:\nCREATE TABLE invoices (id VARCHAR, customer_id VARCHAR); CREATE TABLE invoice_lines (track_id VARCHAR, invoice_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)\n",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow much is the track Fast As a Shark?\n## Context:\nCREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)\n",
        "output": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of tracks which are in Movies playlist but not in music playlist.\n## Context:\nCREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of tracks which are in both Movies and music playlists.\n## Context:\nCREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind number of tracks in each genre?\n## Context:\nCREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many editors are there?\n## Context:\nCREATE TABLE editor (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM editor"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of editors in ascending order of age.\n## Context:\nCREATE TABLE editor (Name VARCHAR, Age VARCHAR)\n",
        "output": "SELECT Name FROM editor ORDER BY Age"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names and ages of editors?\n## Context:\nCREATE TABLE editor (Name VARCHAR, Age VARCHAR)\n",
        "output": "SELECT Name, Age FROM editor"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of editors who are older than 25.\n## Context:\nCREATE TABLE editor (Name VARCHAR, Age INTEGER)\n",
        "output": "SELECT Name FROM editor WHERE Age > 25"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of editors of age either 24 or 25.\n## Context:\nCREATE TABLE editor (Name VARCHAR, Age VARCHAR)\n",
        "output": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the youngest editor?\n## Context:\nCREATE TABLE editor (Name VARCHAR, Age VARCHAR)\n",
        "output": "SELECT Name FROM editor ORDER BY Age LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the different ages of editors? Show each age along with the number of editors of that age.\n## Context:\nCREATE TABLE editor (Age VARCHAR)\n",
        "output": "SELECT Age, COUNT(*) FROM editor GROUP BY Age"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the most common age of editors.\n## Context:\nCREATE TABLE editor (Age VARCHAR)\n",
        "output": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the distinct themes of journals.\n## Context:\nCREATE TABLE journal (Theme VARCHAR)\n",
        "output": "SELECT DISTINCT Theme FROM journal"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of editors and the theme of journals for which they serve on committees.\n## Context:\nCREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)\n",
        "output": "SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.\n## Context:\nCREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, age VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)\n",
        "output": "SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of editors that are on the committee of journals with sales bigger than 3000.\n## Context:\nCREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Journal_ID VARCHAR, Sales INTEGER)\n",
        "output": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the id, name of each editor and the number of journal committees they are on.\n## Context:\nCREATE TABLE editor (editor_id VARCHAR, Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)\n",
        "output": "SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of editors that are on at least two journal committees.\n## Context:\nCREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)\n",
        "output": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of editors that are not on any journal committee.\n## Context:\nCREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)\n",
        "output": "SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the date, theme and sales of the journal which did not have any of the listed editors serving on committee.\n## Context:\nCREATE TABLE journal_committee (journal_ID VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR, journal_ID VARCHAR)\n",
        "output": "SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average sales of the journals that have an editor whose work type is 'Photo'?\n## Context:\nCREATE TABLE journal_committee (journal_ID VARCHAR, work_type VARCHAR); CREATE TABLE journal (sales INTEGER, journal_ID VARCHAR)\n",
        "output": "SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many accounts do we have?\n## Context:\nCREATE TABLE Accounts (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Accounts"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow ids, customer ids, names for all accounts.\n## Context:\nCREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)\n",
        "output": "SELECT account_id, customer_id, account_name FROM Accounts"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow other account details for account with name 338.\n## Context:\nCREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)\n",
        "output": "SELECT other_account_details FROM Accounts WHERE account_name = \"338\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the first name, last name, and phone of the customer with account name 162?\n## Context:\nCREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR)\n",
        "output": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"162\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many accounts does the customer with first name Art and last name Turcotte have?\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all customer ids and the number of accounts for each customer.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR)\n",
        "output": "SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the customer id and number of accounts with most accounts.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR)\n",
        "output": "SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the customer first, last name and id with least number of accounts.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the number of all customers without an account.\n## Context:\nCREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the first names and last names of customers without any account.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR)\n",
        "output": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow distinct first and last names for all customers with an account.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many customers have an account?\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT customer_id) FROM Accounts"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many customers do we have?\n## Context:\nCREATE TABLE Customers (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Customers"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow ids, first names, last names, and phones for all customers.\n## Context:\nCREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)\n",
        "output": "SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the phone and email for customer with first name Aniyah and last name Feest?\n## Context:\nCREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)\n",
        "output": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the number of customer cards.\n## Context:\nCREATE TABLE Customers_cards (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Customers_cards"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow ids, customer ids, card type codes, card numbers for all cards.\n## Context:\nCREATE TABLE Customers_cards (card_id VARCHAR, customer_id VARCHAR, card_type_code VARCHAR, card_number VARCHAR)\n",
        "output": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the date valid from and the date valid to for the card with card number '4560596484842'.\n## Context:\nCREATE TABLE Customers_cards (date_valid_from VARCHAR, date_valid_to VARCHAR, card_number VARCHAR)\n",
        "output": "SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = \"4560596484842\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the first name, last name, and phone of the customer with card 4560596484842.\n## Context:\nCREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Customers_cards (customer_id VARCHAR, card_number VARCHAR)\n",
        "output": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = \"4560596484842\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many cards does customer Art Turcotte have?\n## Context:\nCREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many debit cards do we have?\n## Context:\nCREATE TABLE Customers_cards (card_type_code VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = \"Debit\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many credit cards does customer Blanche Huels have?\n## Context:\nCREATE TABLE Customers_cards (customer_id VARCHAR, card_type_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Blanche\" AND T2.customer_last_name = \"Huels\" AND T1.card_type_code = \"Credit\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all customer ids and the number of cards owned by each customer.\n## Context:\nCREATE TABLE Customers_cards (customer_id VARCHAR)\n",
        "output": "SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the customer id with most number of cards, and how many does he have?\n## Context:\nCREATE TABLE Customers_cards (customer_id VARCHAR)\n",
        "output": "SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow id, first and last names for all customers with at least two cards.\n## Context:\nCREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the customer id, first and last name with least number of accounts.\n## Context:\nCREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all card type codes and the number of cards in each type.\n## Context:\nCREATE TABLE Customers_cards (card_type_code VARCHAR)\n",
        "output": "SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the card type code with most number of cards?\n## Context:\nCREATE TABLE Customers_cards (card_type_code VARCHAR)\n",
        "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow card type codes with at least 5 cards.\n## Context:\nCREATE TABLE Customers_cards (card_type_code VARCHAR)\n",
        "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all card type codes and the number of customers holding cards in each type.\n## Context:\nCREATE TABLE Customers_cards (card_type_code VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the customer ids and firstname without a credit card.\n## Context:\nCREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, card_type_code VARCHAR)\n",
        "output": "SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = \"Credit\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all card type codes.\n## Context:\nCREATE TABLE Customers_Cards (card_type_code VARCHAR)\n",
        "output": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the number of card types.\n## Context:\nCREATE TABLE Customers_Cards (card_type_code VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all transaction types.\n## Context:\nCREATE TABLE Financial_Transactions (transaction_type VARCHAR)\n",
        "output": "SELECT DISTINCT transaction_type FROM Financial_Transactions"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the number of transaction types.\n## Context:\nCREATE TABLE Financial_Transactions (transaction_type VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average and total transaction amount?\n## Context:\nCREATE TABLE Financial_transactions (transaction_amount INTEGER)\n",
        "output": "SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the card type codes and the number of transactions.\n## Context:\nCREATE TABLE Financial_transactions (card_id VARCHAR); CREATE TABLE Customers_cards (card_type_code VARCHAR, card_id VARCHAR)\n",
        "output": "SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the transaction type and the number of transactions.\n## Context:\nCREATE TABLE Financial_transactions (transaction_type VARCHAR)\n",
        "output": "SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the transaction type that has processed the greatest total amount in transactions?\n## Context:\nCREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)\n",
        "output": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the account id and the number of transactions for each account\n## Context:\nCREATE TABLE Financial_transactions (account_id VARCHAR)\n",
        "output": "SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many tracks do we have?\n## Context:\nCREATE TABLE track (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM track"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name and location for all tracks.\n## Context:\nCREATE TABLE track (name VARCHAR, LOCATION VARCHAR)\n",
        "output": "SELECT name, LOCATION FROM track"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names and seatings, ordered by seating for all tracks opened after 2000.\n## Context:\nCREATE TABLE track (name VARCHAR, seating VARCHAR, year_opened INTEGER)\n",
        "output": "SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name, location and seating for the most recently opened track?\n## Context:\nCREATE TABLE track (name VARCHAR, LOCATION VARCHAR, seating VARCHAR, year_opened VARCHAR)\n",
        "output": "SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the minimum, maximum, and average seating for all tracks.\n## Context:\nCREATE TABLE track (seating INTEGER)\n",
        "output": "SELECT MIN(seating), MAX(seating), AVG(seating) FROM track"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name, location, open year for all tracks with a seating higher than the average.\n## Context:\nCREATE TABLE track (name VARCHAR, LOCATION VARCHAR, year_opened VARCHAR, seating INTEGER)\n",
        "output": "SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are distinct locations where tracks are located?\n## Context:\nCREATE TABLE track (LOCATION VARCHAR)\n",
        "output": "SELECT DISTINCT LOCATION FROM track"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many races are there?\n## Context:\nCREATE TABLE race (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM race"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the distinct classes that races can have?\n## Context:\nCREATE TABLE race (CLASS VARCHAR)\n",
        "output": "SELECT DISTINCT CLASS FROM race"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow name, class, and date for all races.\n## Context:\nCREATE TABLE race (name VARCHAR, CLASS VARCHAR, date VARCHAR)\n",
        "output": "SELECT name, CLASS, date FROM race"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the race class and number of races in each class.\n## Context:\nCREATE TABLE race (CLASS VARCHAR)\n",
        "output": "SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the race class with most number of races.\n## Context:\nCREATE TABLE race (CLASS VARCHAR)\n",
        "output": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the race class with at least two races.\n## Context:\nCREATE TABLE race (CLASS VARCHAR)\n",
        "output": "SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names for tracks without a race in class 'GT'.\n## Context:\nCREATE TABLE race (track_id VARCHAR, class VARCHAR); CREATE TABLE track (name VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)\n",
        "output": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all track names that have had no races.\n## Context:\nCREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (name VARCHAR, track_id VARCHAR)\n",
        "output": "SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.\n## Context:\nCREATE TABLE track (year_opened VARCHAR, seating INTEGER)\n",
        "output": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name of track and the number of races in each track.\n## Context:\nCREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)\n",
        "output": "SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name of track with most number of races.\n## Context:\nCREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)\n",
        "output": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name and date for each race and its track name.\n## Context:\nCREATE TABLE race (name VARCHAR, date VARCHAR, track_id VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)\n",
        "output": "SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name and location of track with 1 race.\n## Context:\nCREATE TABLE race (track_id VARCHAR); CREATE TABLE track (name VARCHAR, location VARCHAR, track_id VARCHAR)\n",
        "output": "SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.\n## Context:\nCREATE TABLE track (LOCATION VARCHAR, seating INTEGER)\n",
        "output": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many members have the black membership card?\n## Context:\nCREATE TABLE member (Membership_card VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM member WHERE Membership_card = 'Black'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of members living in each address.\n## Context:\nCREATE TABLE member (address VARCHAR)\n",
        "output": "SELECT COUNT(*), address FROM member GROUP BY address"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nGive me the names of members whose address is in Harford or Waterbury.\n## Context:\nCREATE TABLE member (name VARCHAR, address VARCHAR)\n",
        "output": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the ids and names of members who are under age 30 or with black membership card.\n## Context:\nCREATE TABLE member (name VARCHAR, member_id VARCHAR, Membership_card VARCHAR, age VARCHAR)\n",
        "output": "SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the purchase time, age and address of each member, and show the results in the order of purchase time.\n## Context:\nCREATE TABLE member (Time_of_purchase VARCHAR, age VARCHAR, address VARCHAR)\n",
        "output": "SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich membership card has more than 5 members?\n## Context:\nCREATE TABLE member (Membership_card VARCHAR)\n",
        "output": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich address has both members younger than 30 and members older than 40?\n## Context:\nCREATE TABLE member (address VARCHAR, age INTEGER)\n",
        "output": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the membership card held by both members living in Hartford and ones living in Waterbury address?\n## Context:\nCREATE TABLE member (membership_card VARCHAR, address VARCHAR)\n",
        "output": "SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many members are not living in Hartford?\n## Context:\nCREATE TABLE member (address VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM member WHERE address <> 'Hartford'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich address do not have any member with the black membership card?\n## Context:\nCREATE TABLE member (address VARCHAR, Membership_card VARCHAR)\n",
        "output": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the shop addresses ordered by their opening year.\n## Context:\nCREATE TABLE shop (address VARCHAR, open_year VARCHAR)\n",
        "output": "SELECT address FROM shop ORDER BY open_year"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the average score and average staff number of all shops?\n## Context:\nCREATE TABLE shop (num_of_staff INTEGER, score INTEGER)\n",
        "output": "SELECT AVG(num_of_staff), AVG(score) FROM shop"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the id and address of the shops whose score is below the average score.\n## Context:\nCREATE TABLE shop (shop_id VARCHAR, address VARCHAR, score INTEGER)\n",
        "output": "SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the address and staff number of the shops that do not have any happy hour.\n## Context:\nCREATE TABLE shop (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR)\n",
        "output": "SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the id and address of the shops which have a happy hour in May?\n## Context:\nCREATE TABLE shop (address VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (shop_id VARCHAR)\n",
        "output": "SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nwhich shop has happy hour most frequently? List its id and number of happy hours.\n## Context:\nCREATE TABLE happy_hour (shop_id VARCHAR)\n",
        "output": "SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich month has the most happy hours?\n## Context:\nCREATE TABLE happy_hour (MONTH VARCHAR)\n",
        "output": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich months have more than 2 happy hours?\n## Context:\nCREATE TABLE happy_hour (MONTH VARCHAR)\n",
        "output": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many albums are there?\n## Context:\nCREATE TABLE ALBUM (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM ALBUM"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of all music genres.\n## Context:\nCREATE TABLE GENRE (Name VARCHAR)\n",
        "output": "SELECT Name FROM GENRE"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind all the customer information in state NY.\n## Context:\nCREATE TABLE CUSTOMER (State VARCHAR)\n",
        "output": "SELECT * FROM CUSTOMER WHERE State = \"NY\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the first names and last names of the employees who live in Calgary city.\n## Context:\nCREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, City VARCHAR)\n",
        "output": "SELECT FirstName, LastName FROM EMPLOYEE WHERE City = \"Calgary\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the distinct billing countries of the invoices?\n## Context:\nCREATE TABLE INVOICE (BillingCountry VARCHAR)\n",
        "output": "SELECT DISTINCT (BillingCountry) FROM INVOICE"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all artists that have \"a\" in their names.\n## Context:\nCREATE TABLE ARTIST (Name VARCHAR)\n",
        "output": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the title of all the albums of the artist \"AC/DC\".\n## Context:\nCREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)\n",
        "output": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC/DC\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHom many albums does the artist \"Metallica\" have?\n## Context:\nCREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich artist does the album \"Balls to the Wall\" belong to?\n## Context:\nCREATE TABLE ALBUM (ArtistId VARCHAR, Title VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)\n",
        "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = \"Balls to the Wall\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich artist has the most albums?\n## Context:\nCREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)\n",
        "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all the tracks that contain the word \"you\".\n## Context:\nCREATE TABLE TRACK (Name VARCHAR)\n",
        "output": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average unit price of all the tracks?\n## Context:\nCREATE TABLE TRACK (UnitPrice INTEGER)\n",
        "output": "SELECT AVG(UnitPrice) FROM TRACK"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the durations of the longest and the shortest tracks in milliseconds?\n## Context:\nCREATE TABLE TRACK (Milliseconds INTEGER)\n",
        "output": "SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the album names, ids and the number of tracks for each album.\n## Context:\nCREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR)\n",
        "output": "SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the most common genre in all tracks?\n## Context:\nCREATE TABLE GENRE (Name VARCHAR, GenreId VARCHAR); CREATE TABLE TRACK (GenreId VARCHAR)\n",
        "output": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the least common media type in all tracks?\n## Context:\nCREATE TABLE MEDIATYPE (Name VARCHAR, MediaTypeId VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)\n",
        "output": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the album names and ids for albums that contain tracks with unit price bigger than 1.\n## Context:\nCREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR, UnitPrice INTEGER)\n",
        "output": "SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many tracks belong to rock genre?\n## Context:\nCREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average unit price of tracks that belong to Jazz genre?\n## Context:\nCREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)\n",
        "output": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?\n## Context:\nCREATE TABLE CUSTOMER (FirstName VARCHAR, LastName VARCHAR, Email VARCHAR)\n",
        "output": "SELECT FirstName, LastName FROM CUSTOMER WHERE Email = \"luisg@embraer.com.br\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many customers have email that contains \"gmail.com\"?\n## Context:\nCREATE TABLE CUSTOMER (Email VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the first name and last name employee helps the customer with first name Leonie?\n## Context:\nCREATE TABLE CUSTOMER (SupportRepId VARCHAR, FirstName VARCHAR); CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, EmployeeId VARCHAR)\n",
        "output": "SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = \"Leonie\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat city does the employee who helps the customer with postal code 70174 live in?\n## Context:\nCREATE TABLE EMPLOYEE (City VARCHAR, EmployeeId VARCHAR); CREATE TABLE CUSTOMER (SupportRepId VARCHAR, PostalCode VARCHAR)\n",
        "output": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct cities does the employees live in?\n## Context:\nCREATE TABLE EMPLOYEE (city VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind all invoice dates corresponding to customers with first name Astrid and last name Gruber.\n## Context:\nCREATE TABLE CUSTOMER (CustomerId VARCHAR, FirstName VARCHAR); CREATE TABLE INVOICE (InvoiceDate VARCHAR, CustomerId VARCHAR)\n",
        "output": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind all the customer last names that do not have invoice totals larger than 20.\n## Context:\nCREATE TABLE CUSTOMER (LastName VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, CustomerId VARCHAR); CREATE TABLE Invoice (CustomerId VARCHAR, total INTEGER)\n",
        "output": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the first names of all customers that live in Brazil and have an invoice.\n## Context:\nCREATE TABLE CUSTOMER (FirstName VARCHAR, CustomerId VARCHAR, country VARCHAR); CREATE TABLE INVOICE (CustomerId VARCHAR)\n",
        "output": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the address of all customers that live in Germany and have invoice.\n## Context:\nCREATE TABLE INVOICE (CustomerId VARCHAR); CREATE TABLE CUSTOMER (Address VARCHAR, CustomerId VARCHAR, country VARCHAR)\n",
        "output": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the phone numbers of all employees.\n## Context:\nCREATE TABLE EMPLOYEE (Phone VARCHAR)\n",
        "output": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many tracks are in the AAC audio file media type?\n## Context:\nCREATE TABLE MEDIATYPE (MediaTypeId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = \"AAC audio file\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average duration in milliseconds of tracks that belong to Latin or Pop genre?\n## Context:\nCREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)\n",
        "output": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the employee first names and ids of employees who serve at least 10 customers.\n## Context:\nCREATE TABLE CUSTOMER (FirstName VARCHAR, SupportRepId VARCHAR); CREATE TABLE EMPLOYEE (EmployeeId VARCHAR)\n",
        "output": "SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the employee last names that serves no more than 20 customers.\n## Context:\nCREATE TABLE EMPLOYEE (EmployeeId VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, SupportRepId VARCHAR)\n",
        "output": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease list all album titles in alphabetical order.\n## Context:\nCREATE TABLE ALBUM (Title VARCHAR)\n",
        "output": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease list the name and id of all artists that have at least 3 albums in alphabetical order.\n## Context:\nCREATE TABLE ARTIST (Name VARCHAR, ArtistID VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)\n",
        "output": "SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of artists that do not have any albums.\n## Context:\nCREATE TABLE ARTIST (Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)\n",
        "output": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average unit price of rock tracks?\n## Context:\nCREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (UnitPrice INTEGER, GenreId VARCHAR)\n",
        "output": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the duration of the longest and shortest pop tracks in milliseconds?\n## Context:\nCREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)\n",
        "output": "SELECT MAX(Milliseconds), MIN(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Pop\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the birth dates of employees living in Edmonton?\n## Context:\nCREATE TABLE EMPLOYEE (BirthDate VARCHAR, City VARCHAR)\n",
        "output": "SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the distinct unit prices of all tracks?\n## Context:\nCREATE TABLE TRACK (UnitPrice VARCHAR)\n",
        "output": "SELECT DISTINCT (UnitPrice) FROM TRACK"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many artists do not have any album?\n## Context:\nCREATE TABLE ARTIST (artistid VARCHAR); CREATE TABLE ALBUM (artistid VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?\n## Context:\nCREATE TABLE Genre (GenreID VARCHAR, Name VARCHAR); CREATE TABLE Track (AlbumId VARCHAR, GenreID VARCHAR); CREATE TABLE Album (Title VARCHAR, AlbumId VARCHAR)\n",
        "output": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind all the phone numbers.\n## Context:\nCREATE TABLE available_policies (customer_phone VARCHAR)\n",
        "output": "SELECT customer_phone FROM available_policies"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the customer phone numbers under the policy \"Life Insurance\"?\n## Context:\nCREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)\n",
        "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich policy type has the most records in the database?\n## Context:\nCREATE TABLE available_policies (policy_type_code VARCHAR)\n",
        "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are all the customer phone numbers under the most popular policy type?\n## Context:\nCREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)\n",
        "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the policy type used by more than 4 customers.\n## Context:\nCREATE TABLE available_policies (policy_type_code VARCHAR)\n",
        "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total and average amount of settlements.\n## Context:\nCREATE TABLE settlements (settlement_amount INTEGER)\n",
        "output": "SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of services that have been used for more than 2 times in first notification of loss.\n## Context:\nCREATE TABLE services (service_name VARCHAR, service_id VARCHAR); CREATE TABLE first_notification_of_loss (service_id VARCHAR)\n",
        "output": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING COUNT(*) > 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the effective date of the claim that has the largest amount of total settlement?\n## Context:\nCREATE TABLE settlements (claim_id VARCHAR, settlement_amount INTEGER); CREATE TABLE claims (Effective_Date VARCHAR, claim_id VARCHAR)\n",
        "output": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY SUM(t2.settlement_amount) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many policies are listed for the customer named \"Dayana Robel\"?\n## Context:\nCREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the customer who has the most policies listed?\n## Context:\nCREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)\n",
        "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are all the policy types of the customer named \"Dayana Robel\"?\n## Context:\nCREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)\n",
        "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are all the policy types of the customer that has the most policies listed?\n## Context:\nCREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)\n",
        "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all the services in the alphabetical order.\n## Context:\nCREATE TABLE services (service_name VARCHAR)\n",
        "output": "SELECT service_name FROM services ORDER BY service_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many services are there?\n## Context:\nCREATE TABLE services (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM services"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of users who do not have a first notification of loss record.\n## Context:\nCREATE TABLE first_notification_of_loss (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR)\n",
        "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".\n## Context:\nCREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)\n",
        "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".\n## Context:\nCREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)\n",
        "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the IDs of customers whose name contains \"Diana\".\n## Context:\nCREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)\n",
        "output": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the maximum and minimum settlement amount on record?\n## Context:\nCREATE TABLE settlements (settlement_amount INTEGER)\n",
        "output": "SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all the customers in increasing order of IDs.\n## Context:\nCREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)\n",
        "output": "SELECT customer_id, customer_name FROM customers ORDER BY customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nRetrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"\n## Context:\nCREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (date_opened VARCHAR, date_closed VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many kinds of enzymes are there?\n## Context:\nCREATE TABLE enzyme (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM enzyme"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of enzymes in descending lexicographical order.\n## Context:\nCREATE TABLE enzyme (name VARCHAR)\n",
        "output": "SELECT name FROM enzyme ORDER BY name DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names and the locations that the enzymes can make an effect.\n## Context:\nCREATE TABLE enzyme (name VARCHAR, LOCATION VARCHAR)\n",
        "output": "SELECT name, LOCATION FROM enzyme"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?\n## Context:\nCREATE TABLE enzyme (OMIM INTEGER)\n",
        "output": "SELECT MAX(OMIM) FROM enzyme"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?\n## Context:\nCREATE TABLE enzyme (product VARCHAR, chromosome VARCHAR, porphyria VARCHAR, LOCATION VARCHAR)\n",
        "output": "SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of enzymes who does not produce 'Heme'?\n## Context:\nCREATE TABLE enzyme (name VARCHAR, product VARCHAR)\n",
        "output": "SELECT name FROM enzyme WHERE product <> 'Heme'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names and trade names of the medicines which has 'Yes' value in the FDA record?\n## Context:\nCREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, FDA_approved VARCHAR)\n",
        "output": "SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?\n## Context:\nCREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, medicine_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the ids and names of the medicine that can interact with two or more enzymes?\n## Context:\nCREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR)\n",
        "output": "SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.\n## Context:\nCREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR, FDA_approved VARCHAR)\n",
        "output": "SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the id and name of the enzyme with most number of medicines that can interact as 'activator'?\n## Context:\nCREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (id VARCHAR, name VARCHAR)\n",
        "output": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?\n## Context:\nCREATE TABLE enzyme (id VARCHAR, name VARCHAR); CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR, medicine_id VARCHAR, enzyme_id VARCHAR)\n",
        "output": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the most common interaction type between enzymes and medicine? And how many are there?\n## Context:\nCREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR)\n",
        "output": "SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many medicines have the FDA approval status 'No' ?\n## Context:\nCREATE TABLE medicine (FDA_approved VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many enzymes do not have any interactions?\n## Context:\nCREATE TABLE medicine_enzyme_interaction (id VARCHAR, enzyme_id VARCHAR); CREATE TABLE enzyme (id VARCHAR, enzyme_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the id and trade name of the medicines can interact with at least 3 enzymes?\n## Context:\nCREATE TABLE medicine (id VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)\n",
        "output": "SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?\n## Context:\nCREATE TABLE enzyme (name VARCHAR, location VARCHAR, product VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR)\n",
        "output": "SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.\n## Context:\nCREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)\n",
        "output": "SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.\n## Context:\nCREATE TABLE medicine (name VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR, enzyme_id VARCHAR); CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE enzyme (id VARCHAR, product VARCHAR)\n",
        "output": "SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct FDA approval statuses are there for the medicines?\n## Context:\nCREATE TABLE medicine (FDA_approved VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT FDA_approved) FROM medicine"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich enzyme names have the substring \"ALA\"?\n## Context:\nCREATE TABLE enzyme (name VARCHAR)\n",
        "output": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nfind the number of medicines offered by each trade.\n## Context:\nCREATE TABLE medicine (trade_name VARCHAR)\n",
        "output": "SELECT trade_name, COUNT(*) FROM medicine GROUP BY trade_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all schools and their nicknames in the order of founded year.\n## Context:\nCREATE TABLE university (school VARCHAR, nickname VARCHAR, founded VARCHAR)\n",
        "output": "SELECT school, nickname FROM university ORDER BY founded"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all public schools and their locations.\n## Context:\nCREATE TABLE university (school VARCHAR, LOCATION VARCHAR, affiliation VARCHAR)\n",
        "output": "SELECT school, LOCATION FROM university WHERE affiliation = 'Public'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhen was the school with the largest enrollment founded?\n## Context:\nCREATE TABLE university (founded VARCHAR, enrollment VARCHAR)\n",
        "output": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the founded year of the newest non public school.\n## Context:\nCREATE TABLE university (founded VARCHAR, affiliation VARCHAR)\n",
        "output": "SELECT founded FROM university WHERE affiliation <> 'Public' ORDER BY founded DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many schools are in the basketball match?\n## Context:\nCREATE TABLE basketball_match (school_id VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT school_id) FROM basketball_match"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the highest acc percent score in the competition?\n## Context:\nCREATE TABLE basketball_match (acc_percent VARCHAR)\n",
        "output": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the primary conference of the school that has the lowest acc percent score in the competition?\n## Context:\nCREATE TABLE basketball_match (school_id VARCHAR, acc_percent VARCHAR); CREATE TABLE university (Primary_conference VARCHAR, school_id VARCHAR)\n",
        "output": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the team name and acc regular season score of the school that was founded for the longest time?\n## Context:\nCREATE TABLE university (school_id VARCHAR, founded VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, ACC_Regular_Season VARCHAR, school_id VARCHAR)\n",
        "output": "SELECT t2.team_name, t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the location and all games score of the school that has Clemson as its team name.\n## Context:\nCREATE TABLE basketball_match (All_Games VARCHAR, school_id VARCHAR); CREATE TABLE university (location VARCHAR, school_id VARCHAR)\n",
        "output": "SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the average enrollment size of the universities that are founded before 1850?\n## Context:\nCREATE TABLE university (enrollment INTEGER, founded INTEGER)\n",
        "output": "SELECT AVG(enrollment) FROM university WHERE founded < 1850"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the enrollment and primary_conference of the oldest college.\n## Context:\nCREATE TABLE university (enrollment VARCHAR, primary_conference VARCHAR, founded VARCHAR)\n",
        "output": "SELECT enrollment, primary_conference FROM university ORDER BY founded LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the total and minimum enrollment of all schools?\n## Context:\nCREATE TABLE university (enrollment INTEGER)\n",
        "output": "SELECT SUM(enrollment), MIN(enrollment) FROM university"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total student enrollment for different affiliation type schools.\n## Context:\nCREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)\n",
        "output": "SELECT SUM(enrollment), affiliation FROM university GROUP BY affiliation"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many schools do not participate in the basketball match?\n## Context:\nCREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (school_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM basketball_match)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the schools that were either founded after 1850 or public.\n## Context:\nCREATE TABLE university (school VARCHAR, founded VARCHAR, affiliation VARCHAR)\n",
        "output": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind how many different affiliation types there are.\n## Context:\nCREATE TABLE university (affiliation VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT affiliation) FROM university"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind how many school locations have the word 'NY'.\n## Context:\nCREATE TABLE university (LOCATION VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the team names of the universities whose enrollments are smaller than the average enrollment size.\n## Context:\nCREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, school_id VARCHAR); CREATE TABLE university (enrollment INTEGER)\n",
        "output": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT AVG(enrollment) FROM university)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of universities that have over a 20000 enrollment size for each affiliation type.\n## Context:\nCREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)\n",
        "output": "SELECT COUNT(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.\n## Context:\nCREATE TABLE university (affiliation VARCHAR, Enrollment INTEGER, founded INTEGER)\n",
        "output": "SELECT SUM(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the maximum enrollment across all schools?\n## Context:\nCREATE TABLE university (Enrollment INTEGER)\n",
        "output": "SELECT MAX(Enrollment) FROM university"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all information regarding the basketball match.\n## Context:\nCREATE TABLE basketball_match (Id VARCHAR)\n",
        "output": "SELECT * FROM basketball_match"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList names of all teams in the basketball competition, ordered by all home scores in descending order.\n## Context:\nCREATE TABLE basketball_match (team_name VARCHAR, All_Home VARCHAR)\n",
        "output": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nthe names of models that launched between 2002 and 2004.\n## Context:\nCREATE TABLE chip_model (Model_name VARCHAR, Launch_year INTEGER)\n",
        "output": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich model has the least amount of RAM? List the model name and the amount of RAM.\n## Context:\nCREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR)\n",
        "output": "SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?\n## Context:\nCREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR)\n",
        "output": "SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many phone hardware models are produced by the company named \"Nokia Corporation\"?\n## Context:\nCREATE TABLE phone (Company_name VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM phone WHERE Company_name = \"Nokia Corporation\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?\n## Context:\nCREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (RAM_MiB INTEGER, Model_name VARCHAR)\n",
        "output": "SELECT MAX(T1.RAM_MiB), MIN(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average ROM size of phones produced by the company named \"Nokia Corporation\"?\n## Context:\nCREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (ROM_MiB INTEGER, Model_name VARCHAR)\n",
        "output": "SELECT AVG(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.\n## Context:\nCREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, chip_model VARCHAR)\n",
        "output": "SELECT T2.Hardware_Model_name, T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.\n## Context:\nCREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, Accreditation_type VARCHAR)\n",
        "output": "SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE 'Full'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".\n## Context:\nCREATE TABLE phone (screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE screen_mode (Char_cells VARCHAR, Pixels VARCHAR, Hardware_colours VARCHAR, Graphics_mode VARCHAR)\n",
        "output": "SELECT T1.Char_cells, T1.Pixels, T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"\n## Context:\nCREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)\n",
        "output": "SELECT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.\n## Context:\nCREATE TABLE phone (Company_name VARCHAR)\n",
        "output": "SELECT Company_name, COUNT(*) FROM phone GROUP BY Company_name ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of the company that produced more than one phone model.\n## Context:\nCREATE TABLE phone (Company_name VARCHAR)\n",
        "output": "SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the maximum, minimum and average number of used kb in screen mode.\n## Context:\nCREATE TABLE screen_mode (used_kb INTEGER)\n",
        "output": "SELECT MAX(used_kb), MIN(used_kb), AVG(used_kb) FROM screen_mode"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of the phone model launched in year 2002 and with the highest RAM size.\n## Context:\nCREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR)\n",
        "output": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the wifi and screen mode type of the hardware model named \"LG-P760\"?\n## Context:\nCREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE chip_model (WiFi VARCHAR, Model_name VARCHAR); CREATE TABLE screen_mode (Type VARCHAR, Graphics_mode VARCHAR)\n",
        "output": "SELECT T1.WiFi, T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.\n## Context:\nCREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)\n",
        "output": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB > 32"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"\n## Context:\nCREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)\n",
        "output": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" OR t2.Company_name = \"Nokia Corporation\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.\n## Context:\nCREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)\n",
        "output": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = \"Nokia Corporation\" AND T1.Type <> \"Text\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.\n## Context:\nCREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, used_kb INTEGER)\n",
        "output": "SELECT DISTINCT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of phones for each accreditation type.\n## Context:\nCREATE TABLE phone (Accreditation_type VARCHAR)\n",
        "output": "SELECT Accreditation_type, COUNT(*) FROM phone GROUP BY Accreditation_type"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the accreditation level that more than 3 phones use.\n## Context:\nCREATE TABLE phone (Accreditation_level VARCHAR)\n",
        "output": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING COUNT(*) > 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the details for all chip models.\n## Context:\nCREATE TABLE chip_model (Id VARCHAR)\n",
        "output": "SELECT * FROM chip_model"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many models do not have the wifi function?\n## Context:\nCREATE TABLE chip_model (wifi VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM chip_model WHERE wifi = 'No'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all the model names sorted by their launch year.\n## Context:\nCREATE TABLE chip_model (model_name VARCHAR, launch_year VARCHAR)\n",
        "output": "SELECT model_name FROM chip_model ORDER BY launch_year"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the average ram mib size of the chip models that are never used by any phone.\n## Context:\nCREATE TABLE chip_model (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR); CREATE TABLE phone (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR)\n",
        "output": "SELECT AVG(RAM_MiB) FROM chip_model WHERE NOT model_name IN (SELECT chip_model FROM phone)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of the chip models that are not used by any phone with full accreditation type.\n## Context:\nCREATE TABLE chip_model (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR); CREATE TABLE phone (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR)\n",
        "output": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.\n## Context:\nCREATE TABLE phone (screen_mode VARCHAR, Accreditation_type VARCHAR); CREATE TABLE screen_mode (pixels VARCHAR, Graphics_mode VARCHAR)\n",
        "output": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Full'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many countries are there in total?\n## Context:\nCREATE TABLE country (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM country"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the country name and capital of all countries.\n## Context:\nCREATE TABLE country (Country_name VARCHAR, Capital VARCHAR)\n",
        "output": "SELECT Country_name, Capital FROM country"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all official native languages that contain the word \"English\".\n## Context:\nCREATE TABLE country (Official_native_language VARCHAR)\n",
        "output": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all distinct positions of matches.\n## Context:\nCREATE TABLE match_season (POSITION VARCHAR)\n",
        "output": "SELECT DISTINCT POSITION FROM match_season"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the players from college UCLA.\n## Context:\nCREATE TABLE match_season (Player VARCHAR, College VARCHAR)\n",
        "output": "SELECT Player FROM match_season WHERE College = \"UCLA\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the distinct position of players from college UCLA or Duke.\n## Context:\nCREATE TABLE match_season (POSITION VARCHAR, College VARCHAR)\n",
        "output": "SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the draft pick numbers and draft classes of players whose positions are defenders.\n## Context:\nCREATE TABLE match_season (Draft_Pick_Number VARCHAR, Draft_Class VARCHAR, POSITION VARCHAR)\n",
        "output": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = \"Defender\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct teams are involved in match seasons?\n## Context:\nCREATE TABLE match_season (Team VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT Team) FROM match_season"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the players and the years played.\n## Context:\nCREATE TABLE player (Player VARCHAR, Years_Played VARCHAR)\n",
        "output": "SELECT Player, Years_Played FROM player"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all team names.\n## Context:\nCREATE TABLE Team (Name VARCHAR)\n",
        "output": "SELECT Name FROM Team"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the season, the player, and the name of the country that player belongs to.\n## Context:\nCREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)\n",
        "output": "SELECT T2.Season, T2.Player, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich players are from Indonesia?\n## Context:\nCREATE TABLE country (Country_id VARCHAR, Country_name VARCHAR); CREATE TABLE match_season (Player VARCHAR, Country VARCHAR)\n",
        "output": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = \"Indonesia\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the distinct positions of the players from a country whose capital is Dublin?\n## Context:\nCREATE TABLE country (Country_id VARCHAR, Capital VARCHAR); CREATE TABLE match_season (Position VARCHAR, Country VARCHAR)\n",
        "output": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the official languages of the countries of players from Maryland or Duke college?\n## Context:\nCREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, College VARCHAR)\n",
        "output": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct official languages are there among countries of players whose positions are defenders.\n## Context:\nCREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the season, the player, and the name of the team that players belong to.\n## Context:\nCREATE TABLE team (Name VARCHAR, Team_id VARCHAR); CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Team VARCHAR)\n",
        "output": "SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the positions of the players from the team with name \"Ryley Goldner\".\n## Context:\nCREATE TABLE match_season (Position VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)\n",
        "output": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct colleges are associated with players from the team with name \"Columbus Crew\".\n## Context:\nCREATE TABLE match_season (College VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the players and years played for players from team \"Columbus Crew\".\n## Context:\nCREATE TABLE player (Player VARCHAR, Years_Played VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)\n",
        "output": "SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the position of players and the corresponding number of players.\n## Context:\nCREATE TABLE match_season (POSITION VARCHAR)\n",
        "output": "SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the country names and the corresponding number of players.\n## Context:\nCREATE TABLE match_season (Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)\n",
        "output": "SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nReturn all players sorted by college in ascending alphabetical order.\n## Context:\nCREATE TABLE match_season (player VARCHAR, College VARCHAR)\n",
        "output": "SELECT player FROM match_season ORDER BY College"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the most common position of players in match seasons.\n## Context:\nCREATE TABLE match_season (POSITION VARCHAR)\n",
        "output": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the top 3 most common colleges of players in match seasons.\n## Context:\nCREATE TABLE match_season (College VARCHAR)\n",
        "output": "SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name of colleges that have at least two players.\n## Context:\nCREATE TABLE match_season (College VARCHAR)\n",
        "output": "SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name of colleges that have at least two players in descending alphabetical order.\n## Context:\nCREATE TABLE match_season (College VARCHAR)\n",
        "output": "SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2 ORDER BY College DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of teams that do no have match season record?\n## Context:\nCREATE TABLE match_season (Name VARCHAR, Team_id VARCHAR, Team VARCHAR); CREATE TABLE team (Name VARCHAR, Team_id VARCHAR, Team VARCHAR)\n",
        "output": "SELECT Name FROM team WHERE NOT Team_id IN (SELECT Team FROM match_season)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of countries that have both players with position forward and players with position defender?\n## Context:\nCREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)\n",
        "output": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich college have both players with position midfielder and players with position defender?\n## Context:\nCREATE TABLE match_season (College VARCHAR, POSITION VARCHAR)\n",
        "output": "SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many climbers are there?\n## Context:\nCREATE TABLE climber (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM climber"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of climbers in descending order of points.\n## Context:\nCREATE TABLE climber (Name VARCHAR, Points VARCHAR)\n",
        "output": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of climbers whose country is not Switzerland.\n## Context:\nCREATE TABLE climber (Name VARCHAR, Country VARCHAR)\n",
        "output": "SELECT Name FROM climber WHERE Country <> \"Switzerland\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the maximum point for climbers whose country is United Kingdom?\n## Context:\nCREATE TABLE climber (Points INTEGER, Country VARCHAR)\n",
        "output": "SELECT MAX(Points) FROM climber WHERE Country = \"United Kingdom\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct countries are the climbers from?\n## Context:\nCREATE TABLE climber (Country VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of mountains in ascending alphabetical order?\n## Context:\nCREATE TABLE mountain (Name VARCHAR)\n",
        "output": "SELECT Name FROM mountain ORDER BY Name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the countries of mountains with height bigger than 5000?\n## Context:\nCREATE TABLE mountain (Country VARCHAR, Height INTEGER)\n",
        "output": "SELECT Country FROM mountain WHERE Height > 5000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the highest mountain?\n## Context:\nCREATE TABLE mountain (Name VARCHAR, Height VARCHAR)\n",
        "output": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the distinct ranges of the mountains with the top 3 prominence.\n## Context:\nCREATE TABLE mountain (Range VARCHAR, Prominence VARCHAR)\n",
        "output": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names of climbers and the names of mountains they climb.\n## Context:\nCREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)\n",
        "output": "SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of climbers and the heights of mountains they climb.\n## Context:\nCREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)\n",
        "output": "SELECT T1.Name, T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the height of the mountain climbed by the climber with the maximum points.\n## Context:\nCREATE TABLE climber (Mountain_ID VARCHAR, Points VARCHAR); CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR)\n",
        "output": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the distinct names of mountains climbed by climbers from country \"West Germany\".\n## Context:\nCREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Mountain_ID VARCHAR, Country VARCHAR)\n",
        "output": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the times used by climbers to climb mountains in Country Uganda.\n## Context:\nCREATE TABLE mountain (Mountain_ID VARCHAR, Country VARCHAR); CREATE TABLE climber (Time VARCHAR, Mountain_ID VARCHAR)\n",
        "output": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the countries and the number of climbers from each country.\n## Context:\nCREATE TABLE climber (Country VARCHAR)\n",
        "output": "SELECT Country, COUNT(*) FROM climber GROUP BY Country"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the countries that have more than one mountain.\n## Context:\nCREATE TABLE mountain (Country VARCHAR)\n",
        "output": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of mountains that do not have any climber.\n## Context:\nCREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)\n",
        "output": "SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.\n## Context:\nCREATE TABLE mountain (Country VARCHAR, Height INTEGER)\n",
        "output": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the range that has the most number of mountains.\n## Context:\nCREATE TABLE mountain (Range VARCHAR)\n",
        "output": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of mountains with height more than 5000 or prominence more than 1000.\n## Context:\nCREATE TABLE mountain (Name VARCHAR, Height VARCHAR, Prominence VARCHAR)\n",
        "output": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many body builders are there?\n## Context:\nCREATE TABLE body_builder (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM body_builder"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the total scores of body builders in ascending order.\n## Context:\nCREATE TABLE body_builder (Total VARCHAR)\n",
        "output": "SELECT Total FROM body_builder ORDER BY Total"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the snatch score and clean jerk score of body builders in ascending order of snatch score.\n## Context:\nCREATE TABLE body_builder (Snatch VARCHAR, Clean_Jerk VARCHAR)\n",
        "output": "SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average snatch score of body builders?\n## Context:\nCREATE TABLE body_builder (Snatch INTEGER)\n",
        "output": "SELECT AVG(Snatch) FROM body_builder"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the clean and jerk score of the body builder with the highest total score?\n## Context:\nCREATE TABLE body_builder (Clean_Jerk VARCHAR, Total VARCHAR)\n",
        "output": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the birthdays of people in ascending order of height?\n## Context:\nCREATE TABLE People (Birth_Date VARCHAR, Height VARCHAR)\n",
        "output": "SELECT Birth_Date FROM People ORDER BY Height"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of body builders?\n## Context:\nCREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)\n",
        "output": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of body builders whose total score is higher than 300?\n## Context:\nCREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)\n",
        "output": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the body builder with the greatest body weight?\n## Context:\nCREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)\n",
        "output": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the birth date and birth place of the body builder with the highest total points?\n## Context:\nCREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Birth_Date VARCHAR, Birth_Place VARCHAR, People_ID VARCHAR)\n",
        "output": "SELECT T2.Birth_Date, T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the heights of body builders with total score smaller than 315?\n## Context:\nCREATE TABLE people (Height VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)\n",
        "output": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average total score of body builders with height bigger than 200?\n## Context:\nCREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE body_builder (Total INTEGER, People_ID VARCHAR)\n",
        "output": "SELECT AVG(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of body builders in descending order of total scores?\n## Context:\nCREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)\n",
        "output": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList each birth place along with the number of people from there.\n## Context:\nCREATE TABLE people (Birth_Place VARCHAR)\n",
        "output": "SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the most common birth place of people?\n## Context:\nCREATE TABLE people (Birth_Place VARCHAR)\n",
        "output": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the birth places that are shared by at least two people?\n## Context:\nCREATE TABLE people (Birth_Place VARCHAR)\n",
        "output": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the height and weight of people in descending order of height.\n## Context:\nCREATE TABLE people (Height VARCHAR, Weight VARCHAR)\n",
        "output": "SELECT Height, Weight FROM people ORDER BY Height DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all information about each body builder.\n## Context:\nCREATE TABLE body_builder (Id VARCHAR)\n",
        "output": "SELECT * FROM body_builder"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names and origins of people who are not body builders.\n## Context:\nCREATE TABLE people (Name VARCHAR, birth_place VARCHAR, people_id VARCHAR); CREATE TABLE body_builder (people_id VARCHAR); CREATE TABLE people (Name VARCHAR, birth_place VARCHAR)\n",
        "output": "SELECT Name, birth_place FROM people EXCEPT SELECT T1.Name, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct birth places are there?\n## Context:\nCREATE TABLE people (Birth_Place VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT Birth_Place) FROM people"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many persons are not body builders?\n## Context:\nCREATE TABLE body_builder (people_id VARCHAR, People_ID VARCHAR); CREATE TABLE people (people_id VARCHAR, People_ID VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM people WHERE NOT people_id IN (SELECT People_ID FROM body_builder)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.\n## Context:\nCREATE TABLE people (weight VARCHAR, people_id VARCHAR, height VARCHAR); CREATE TABLE body_builder (people_id VARCHAR, snatch VARCHAR)\n",
        "output": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the total scores of the body builders whose birthday contains the string \"January\" ?\n## Context:\nCREATE TABLE people (people_id VARCHAR, Birth_Date VARCHAR); CREATE TABLE body_builder (total VARCHAR, people_id VARCHAR)\n",
        "output": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the minimum snatch score?\n## Context:\nCREATE TABLE body_builder (snatch INTEGER)\n",
        "output": "SELECT MIN(snatch) FROM body_builder"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many elections are there?\n## Context:\nCREATE TABLE election (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM election"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the votes of elections in descending order.\n## Context:\nCREATE TABLE election (Votes VARCHAR)\n",
        "output": "SELECT Votes FROM election ORDER BY Votes DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the dates and vote percents of elections.\n## Context:\nCREATE TABLE election (Date VARCHAR, Vote_Percent VARCHAR)\n",
        "output": "SELECT Date, Vote_Percent FROM election"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the minimum and maximum vote percents of elections?\n## Context:\nCREATE TABLE election (Vote_Percent INTEGER)\n",
        "output": "SELECT MIN(Vote_Percent), MAX(Vote_Percent) FROM election"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names and parties of representatives?\n## Context:\nCREATE TABLE representative (Name VARCHAR, Party VARCHAR)\n",
        "output": "SELECT Name, Party FROM representative"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of representatives whose party is not \"Republican\"?\n## Context:\nCREATE TABLE Representative (Name VARCHAR, Party VARCHAR)\n",
        "output": "SELECT Name FROM Representative WHERE Party <> \"Republican\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the life spans of representatives from New York state or Indiana state?\n## Context:\nCREATE TABLE representative (Lifespan VARCHAR, State VARCHAR)\n",
        "output": "SELECT Lifespan FROM representative WHERE State = \"New York\" OR State = \"Indiana\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of representatives and the dates of elections they participated in.\n## Context:\nCREATE TABLE election (Date VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)\n",
        "output": "SELECT T2.Name, T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of representatives with more than 10000 votes in election?\n## Context:\nCREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)\n",
        "output": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of representatives in descending order of votes?\n## Context:\nCREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)\n",
        "output": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the party of the representative that has the smallest number of votes.\n## Context:\nCREATE TABLE representative (Party VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)\n",
        "output": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the lifespans of representatives in descending order of vote percent?\n## Context:\nCREATE TABLE election (Representative_ID VARCHAR); CREATE TABLE representative (Lifespan VARCHAR, Representative_ID VARCHAR)\n",
        "output": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average number of votes of representatives from party \"Republican\"?\n## Context:\nCREATE TABLE election (Votes INTEGER, Representative_ID VARCHAR); CREATE TABLE representative (Representative_ID VARCHAR, Party VARCHAR)\n",
        "output": "SELECT AVG(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the different parties of representative? Show the party name and the number of representatives in each party.\n## Context:\nCREATE TABLE representative (Party VARCHAR)\n",
        "output": "SELECT Party, COUNT(*) FROM representative GROUP BY Party"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the party that has the largest number of representatives?\n## Context:\nCREATE TABLE representative (Party VARCHAR)\n",
        "output": "SELECT Party, COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat parties have at least three representatives?\n## Context:\nCREATE TABLE representative (Party VARCHAR)\n",
        "output": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat states have at least two representatives?\n## Context:\nCREATE TABLE representative (State VARCHAR)\n",
        "output": "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of representatives that have not participated in elections listed here.\n## Context:\nCREATE TABLE election (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)\n",
        "output": "SELECT Name FROM representative WHERE NOT Representative_ID IN (SELECT Representative_ID FROM election)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the parties that have both representatives in New York state and representatives in Pennsylvania state.\n## Context:\nCREATE TABLE representative (Party VARCHAR, State VARCHAR)\n",
        "output": "SELECT Party FROM representative WHERE State = \"New York\" INTERSECT SELECT Party FROM representative WHERE State = \"Pennsylvania\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct parties are there for representatives?\n## Context:\nCREATE TABLE representative (Party VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT Party) FROM representative"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many apartment bookings are there in total?\n## Context:\nCREATE TABLE Apartment_Bookings (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Apartment_Bookings"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the start dates and end dates of all the apartment bookings.\n## Context:\nCREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, booking_end_date VARCHAR)\n",
        "output": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all distinct building descriptions.\n## Context:\nCREATE TABLE Apartment_Buildings (building_description VARCHAR)\n",
        "output": "SELECT DISTINCT building_description FROM Apartment_Buildings"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the short names of the buildings managed by \"Emma\".\n## Context:\nCREATE TABLE Apartment_Buildings (building_short_name VARCHAR, building_manager VARCHAR)\n",
        "output": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = \"Emma\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the addresses and phones of all the buildings managed by \"Brenden\".\n## Context:\nCREATE TABLE Apartment_Buildings (building_address VARCHAR, building_phone VARCHAR, building_manager VARCHAR)\n",
        "output": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the building full names that contain the word \"court\"?\n## Context:\nCREATE TABLE Apartment_Buildings (building_full_name VARCHAR)\n",
        "output": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the minimum and maximum number of bathrooms of all the apartments?\n## Context:\nCREATE TABLE Apartments (bathroom_count INTEGER)\n",
        "output": "SELECT MIN(bathroom_count), MAX(bathroom_count) FROM Apartments"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average number of bedrooms of all apartments?\n## Context:\nCREATE TABLE Apartments (bedroom_count INTEGER)\n",
        "output": "SELECT AVG(bedroom_count) FROM Apartments"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nReturn the apartment number and the number of rooms for each apartment.\n## Context:\nCREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)\n",
        "output": "SELECT apt_number, room_count FROM Apartments"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average number of rooms of apartments with type code \"Studio\"?\n## Context:\nCREATE TABLE Apartments (room_count INTEGER, apt_type_code VARCHAR)\n",
        "output": "SELECT AVG(room_count) FROM Apartments WHERE apt_type_code = \"Studio\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nReturn the apartment numbers of the apartments with type code \"Flat\".\n## Context:\nCREATE TABLE Apartments (apt_number VARCHAR, apt_type_code VARCHAR)\n",
        "output": "SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nReturn the first names and last names of all guests\n## Context:\nCREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR)\n",
        "output": "SELECT guest_first_name, guest_last_name FROM Guests"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nReturn the date of birth for all the guests with gender code \"Male\".\n## Context:\nCREATE TABLE Guests (date_of_birth VARCHAR, gender_code VARCHAR)\n",
        "output": "SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the apartment numbers, start dates, and end dates of all the apartment bookings.\n## Context:\nCREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)\n",
        "output": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the booking start and end dates of the apartments with type code \"Duplex\"?\n## Context:\nCREATE TABLE Apartments (apt_id VARCHAR, apt_type_code VARCHAR); CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR)\n",
        "output": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the booking start and end dates of the apartments with more than 2 bedrooms?\n## Context:\nCREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)\n",
        "output": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the booking status code of the apartment with apartment number \"Suite 634\"?\n## Context:\nCREATE TABLE Apartments (apt_id VARCHAR, apt_number VARCHAR); CREATE TABLE Apartment_Bookings (booking_status_code VARCHAR, apt_id VARCHAR)\n",
        "output": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".\n## Context:\nCREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)\n",
        "output": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the average room count of the apartments that have booking status code \"Provisional\".\n## Context:\nCREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR)\n",
        "output": "SELECT AVG(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the guest first names, start dates, and end dates of all the apartment bookings.\n## Context:\nCREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, guest_id VARCHAR); CREATE TABLE Guests (guest_first_name VARCHAR, guest_id VARCHAR)\n",
        "output": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".\n## Context:\nCREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, guest_id VARCHAR); CREATE TABLE Guests (guest_id VARCHAR, gender_code VARCHAR)\n",
        "output": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".\n## Context:\nCREATE TABLE Apartment_Bookings (guest_id VARCHAR, booking_status_code VARCHAR); CREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR, guest_id VARCHAR)\n",
        "output": "SELECT T2.guest_first_name, T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = \"Confirmed\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the facility codes of apartments with more than 4 bedrooms.\n## Context:\nCREATE TABLE Apartment_Facilities (facility_code VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)\n",
        "output": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the total number of rooms of all apartments with facility code \"Gym\".\n## Context:\nCREATE TABLE Apartments (room_count INTEGER, apt_id VARCHAR); CREATE TABLE Apartment_Facilities (apt_id VARCHAR, facility_code VARCHAR)\n",
        "output": "SELECT SUM(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the total number of rooms of the apartments in the building with short name \"Columbus Square\".\n## Context:\nCREATE TABLE Apartment_Buildings (building_id VARCHAR, building_short_name VARCHAR); CREATE TABLE Apartments (room_count INTEGER, building_id VARCHAR)\n",
        "output": "SELECT SUM(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the addresses of the buildings that have apartments with more than 2 bathrooms.\n## Context:\nCREATE TABLE Apartment_Buildings (building_address VARCHAR, building_id VARCHAR); CREATE TABLE Apartments (building_id VARCHAR, bathroom_count INTEGER)\n",
        "output": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".\n## Context:\nCREATE TABLE Apartment_Buildings (building_id VARCHAR, building_manager VARCHAR); CREATE TABLE Apartments (apt_type_code VARCHAR, apt_number VARCHAR, building_id VARCHAR)\n",
        "output": "SELECT T2.apt_type_code, T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the booking status code and the corresponding number of bookings.\n## Context:\nCREATE TABLE Apartment_Bookings (booking_status_code VARCHAR)\n",
        "output": "SELECT booking_status_code, COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nReturn all the apartment numbers sorted by the room count in ascending order.\n## Context:\nCREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)\n",
        "output": "SELECT apt_number FROM Apartments ORDER BY room_count"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nReturn the apartment number with the largest number of bedrooms.\n## Context:\nCREATE TABLE Apartments (apt_number VARCHAR, bedroom_count VARCHAR)\n",
        "output": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.\n## Context:\nCREATE TABLE Apartments (apt_type_code VARCHAR)\n",
        "output": "SELECT apt_type_code, COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the top 3 apartment type codes sorted by the average number of rooms in descending order.\n## Context:\nCREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)\n",
        "output": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.\n## Context:\nCREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count VARCHAR, bedroom_count VARCHAR, room_count INTEGER)\n",
        "output": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the most common apartment type code.\n## Context:\nCREATE TABLE Apartments (apt_type_code VARCHAR)\n",
        "output": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the most common apartment type code among apartments with more than 1 bathroom.\n## Context:\nCREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count INTEGER)\n",
        "output": "SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow each apartment type code, and the maximum and minimum number of rooms for each type.\n## Context:\nCREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)\n",
        "output": "SELECT apt_type_code, MAX(room_count), MIN(room_count) FROM Apartments GROUP BY apt_type_code"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow each gender code and the corresponding count of guests sorted by the count in descending order.\n## Context:\nCREATE TABLE Guests (gender_code VARCHAR)\n",
        "output": "SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many apartments do not have any facility?\n## Context:\nCREATE TABLE Apartment_Facilities (apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Apartments WHERE NOT apt_id IN (SELECT apt_id FROM Apartment_Facilities)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"\n## Context:\nCREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)\n",
        "output": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the apartment numbers of apartments with unit status availability of both 0 and 1.\n## Context:\nCREATE TABLE View_Unit_Status (apt_id VARCHAR, available_yn VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)\n",
        "output": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many games are held after season 2007?\n## Context:\nCREATE TABLE game (season INTEGER)\n",
        "output": "SELECT COUNT(*) FROM game WHERE season > 2007"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the dates of games by the home team name in descending order.\n## Context:\nCREATE TABLE game (Date VARCHAR, home_team VARCHAR)\n",
        "output": "SELECT Date FROM game ORDER BY home_team DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the season, home team, away team of all the games.\n## Context:\nCREATE TABLE game (season VARCHAR, home_team VARCHAR, away_team VARCHAR)\n",
        "output": "SELECT season, home_team, away_team FROM game"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the maximum, minimum and average home games each stadium held?\n## Context:\nCREATE TABLE stadium (home_games INTEGER)\n",
        "output": "SELECT MAX(home_games), MIN(home_games), AVG(home_games) FROM stadium"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average attendance of stadiums with capacity percentage higher than 100%?\n## Context:\nCREATE TABLE stadium (average_attendance VARCHAR, capacity_percentage INTEGER)\n",
        "output": "SELECT average_attendance FROM stadium WHERE capacity_percentage > 100"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?\n## Context:\nCREATE TABLE injury_accident (player VARCHAR, number_of_matches VARCHAR, SOURCE VARCHAR, injury VARCHAR)\n",
        "output": "SELECT player, number_of_matches, SOURCE FROM injury_accident WHERE injury <> 'Knee problem'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the season of the game which causes the player 'Walter Samuel' to get injured?\n## Context:\nCREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR); CREATE TABLE game (season VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the ids, scores, and dates of the games which caused at least two injury accidents?\n## Context:\nCREATE TABLE game (id VARCHAR, score VARCHAR, date VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)\n",
        "output": "SELECT T1.id, T1.score, T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the id and name of the stadium where the most injury accidents happened?\n## Context:\nCREATE TABLE stadium (id VARCHAR, name VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.id, T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nIn which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?\n## Context:\nCREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR, injury VARCHAR); CREATE TABLE game (season VARCHAR, stadium_id VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.season, T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many different kinds of information sources are there for injury accidents?\n## Context:\nCREATE TABLE injury_accident (SOURCE VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT SOURCE) FROM injury_accident"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many games are free of injury accidents?\n## Context:\nCREATE TABLE injury_accident (id VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, game_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM game WHERE NOT id IN (SELECT game_id FROM injury_accident)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct kinds of injuries happened after season 2010?\n## Context:\nCREATE TABLE injury_accident (injury VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, season INTEGER)\n",
        "output": "SELECT COUNT(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.\n## Context:\nCREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR)\n",
        "output": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name, average attendance, total attendance for stadiums where no accidents happened.\n## Context:\nCREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR, id VARCHAR); CREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)\n",
        "output": "SELECT name, average_attendance, total_attendance FROM stadium EXCEPT SELECT T2.name, T2.average_attendance, T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich stadium name contains the substring \"Bank\"?\n## Context:\nCREATE TABLE stadium (name VARCHAR)\n",
        "output": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many games has each stadium held?\n## Context:\nCREATE TABLE stadium (id VARCHAR); CREATE TABLE game (stadium_id VARCHAR)\n",
        "output": "SELECT T1.id, COUNT(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFor each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.\n## Context:\nCREATE TABLE game (date VARCHAR, id VARCHAR, season VARCHAR); CREATE TABLE injury_accident (player VARCHAR, game_id VARCHAR)\n",
        "output": "SELECT T1.date, T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all country and league names.\n## Context:\nCREATE TABLE League (name VARCHAR, country_id VARCHAR); CREATE TABLE Country (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.name, T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many leagues are there in England?\n## Context:\nCREATE TABLE League (country_id VARCHAR); CREATE TABLE Country (id VARCHAR, name VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = \"England\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average weight of all players?\n## Context:\nCREATE TABLE Player (weight INTEGER)\n",
        "output": "SELECT AVG(weight) FROM Player"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the maximum and minimum height of all players?\n## Context:\nCREATE TABLE Player (weight INTEGER)\n",
        "output": "SELECT MAX(weight), MIN(weight) FROM Player"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all player names who have an overall rating higher than the average.\n## Context:\nCREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (overall_rating INTEGER); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating INTEGER)\n",
        "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the names of players who have the best dribbling?\n## Context:\nCREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, dribbling VARCHAR); CREATE TABLE Player_Attributes (overall_rating INTEGER)\n",
        "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = (SELECT MAX(overall_rating) FROM Player_Attributes)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of all players who have a crossing score higher than 90 and prefer their right foot.\n## Context:\nCREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, crossing VARCHAR, preferred_foot VARCHAR)\n",
        "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = \"right\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of all left-footed players who have overall rating between 85 and 90.\n## Context:\nCREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating VARCHAR, preferred_foot VARCHAR)\n",
        "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = \"left\" AND T2.overall_rating >= 85 AND T2.overall_rating <= 90"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average rating for right-footed players and left-footed players?\n## Context:\nCREATE TABLE Player_Attributes (preferred_foot VARCHAR, overall_rating INTEGER)\n",
        "output": "SELECT preferred_foot, AVG(overall_rating) FROM Player_Attributes GROUP BY preferred_foot"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nOf all players with an overall rating greater than 80, how many are right-footed and left-footed?\n## Context:\nCREATE TABLE Player_Attributes (preferred_foot VARCHAR, overall_rating INTEGER)\n",
        "output": "SELECT preferred_foot, COUNT(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all of the player ids with a height of at least 180cm and an overall rating higher than 85.\n## Context:\nCREATE TABLE Player_Attributes (player_api_id VARCHAR, height VARCHAR, overall_rating INTEGER); CREATE TABLE Player (player_api_id VARCHAR, height VARCHAR, overall_rating INTEGER)\n",
        "output": "SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all of the ids for left-footed players with a height between 180cm and 190cm.\n## Context:\nCREATE TABLE Player_Attributes (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR); CREATE TABLE Player (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR)\n",
        "output": "SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = \"left\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWho are the top 3 players in terms of overall rating?\n## Context:\nCREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR)\n",
        "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY overall_rating DESC LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names and birthdays of the top five players in terms of potential.\n## Context:\nCREATE TABLE Player_Attributes (player_api_id VARCHAR); CREATE TABLE Player (player_name VARCHAR, birthday VARCHAR, player_api_id VARCHAR)\n",
        "output": "SELECT DISTINCT T1.player_name, T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many performances are there?\n## Context:\nCREATE TABLE performance (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM performance"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the hosts of performances in ascending order of attendance.\n## Context:\nCREATE TABLE performance (HOST VARCHAR, Attendance VARCHAR)\n",
        "output": "SELECT HOST FROM performance ORDER BY Attendance"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the dates and locations of performances?\n## Context:\nCREATE TABLE performance (Date VARCHAR, LOCATION VARCHAR)\n",
        "output": "SELECT Date, LOCATION FROM performance"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"\n## Context:\nCREATE TABLE performance (Attendance VARCHAR, LOCATION VARCHAR)\n",
        "output": "SELECT Attendance FROM performance WHERE LOCATION = \"TD Garden\" OR LOCATION = \"Bell Centre\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average number of attendees for performances?\n## Context:\nCREATE TABLE performance (Attendance INTEGER)\n",
        "output": "SELECT AVG(Attendance) FROM performance"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the date of the performance with the highest number of attendees?\n## Context:\nCREATE TABLE performance (Date VARCHAR, Attendance VARCHAR)\n",
        "output": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow different locations and the number of performances at each location.\n## Context:\nCREATE TABLE performance (LOCATION VARCHAR)\n",
        "output": "SELECT LOCATION, COUNT(*) FROM performance GROUP BY LOCATION"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the most common location of performances.\n## Context:\nCREATE TABLE performance (LOCATION VARCHAR)\n",
        "output": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the locations that have at least two performances.\n## Context:\nCREATE TABLE performance (LOCATION VARCHAR)\n",
        "output": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.\n## Context:\nCREATE TABLE performance (LOCATION VARCHAR, Attendance INTEGER)\n",
        "output": "SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of members and the location of the performances they attended.\n## Context:\nCREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)\n",
        "output": "SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of members and the location of performances they attended in ascending alphabetical order of their names.\n## Context:\nCREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)\n",
        "output": "SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T2.Name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the dates of performances with attending members whose roles are \"Violin\".\n## Context:\nCREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Member_ID VARCHAR, Role VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)\n",
        "output": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of members and the dates of performances they attended in descending order of attendance of the performances.\n## Context:\nCREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR, Attendance VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)\n",
        "output": "SELECT T2.Name, T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of members who did not attend any performance.\n## Context:\nCREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Name VARCHAR, Member_ID VARCHAR)\n",
        "output": "SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM member_attendance)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the buildings which have rooms with capacity more than 50.\n## Context:\nCREATE TABLE classroom (building VARCHAR, capacity INTEGER)\n",
        "output": "SELECT DISTINCT building FROM classroom WHERE capacity > 50"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nCount the number of rooms that are not in the Lamberton building.\n## Context:\nCREATE TABLE classroom (building VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM classroom WHERE building <> 'Lamberton'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name and building of the departments whose budget is more than the average budget?\n## Context:\nCREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget INTEGER)\n",
        "output": "SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the room number of the rooms which can sit 50 to 100 students and their buildings.\n## Context:\nCREATE TABLE classroom (building VARCHAR, room_number VARCHAR, capacity INTEGER)\n",
        "output": "SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and building of the department with the highest budget.\n## Context:\nCREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget VARCHAR)\n",
        "output": "SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the student who has the highest total credits in the History department.\n## Context:\nCREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)\n",
        "output": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many rooms does the Lamberton building have?\n## Context:\nCREATE TABLE classroom (building VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many students have advisors?\n## Context:\nCREATE TABLE advisor (s_id VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT s_id) FROM advisor"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many departments offer courses?\n## Context:\nCREATE TABLE course (dept_name VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT dept_name) FROM course"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many different courses offered by Physics department?\n## Context:\nCREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the title of courses that have two prerequisites?\n## Context:\nCREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)\n",
        "output": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) = 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the title, credit, and department name of courses that have more than one prerequisites?\n## Context:\nCREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, dept_name VARCHAR, course_id VARCHAR)\n",
        "output": "SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many courses that do not have prerequisite?\n## Context:\nCREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the courses that do not have any prerequisite?\n## Context:\nCREATE TABLE prereq (title VARCHAR, course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)\n",
        "output": "SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many different instructors have taught some course?\n## Context:\nCREATE TABLE teaches (id VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT id) FROM teaches"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total budgets of the Marketing or Finance department.\n## Context:\nCREATE TABLE department (budget INTEGER, dept_name VARCHAR)\n",
        "output": "SELECT SUM(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the department name of the instructor whose name contains 'Soisalon'.\n## Context:\nCREATE TABLE instructor (dept_name VARCHAR, name VARCHAR)\n",
        "output": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many rooms whose capacity is less than 50 does the Lamberton building have?\n## Context:\nCREATE TABLE classroom (building VARCHAR, capacity VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and budget of departments whose budgets are more than the average budget.\n## Context:\nCREATE TABLE department (dept_name VARCHAR, budget INTEGER)\n",
        "output": "SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nwhat is the name of the instructor who is in Statistics department and earns the lowest salary?\n## Context:\nCREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)\n",
        "output": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the title of course that is provided by both Statistics and Psychology departments.\n## Context:\nCREATE TABLE course (title VARCHAR, dept_name VARCHAR)\n",
        "output": "SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the title of course that is provided by Statistics but not Psychology departments.\n## Context:\nCREATE TABLE course (title VARCHAR, dept_name VARCHAR)\n",
        "output": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the id of instructors who taught a class in Fall 2009 but not in Spring 2010.\n## Context:\nCREATE TABLE teaches (id VARCHAR, semester VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of students who took any class in the years of 2009 and 2010.\n## Context:\nCREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE takes (id VARCHAR)\n",
        "output": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of the top 3 departments that provide the largest amount of courses?\n## Context:\nCREATE TABLE course (dept_name VARCHAR)\n",
        "output": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the department that offers the highest total credits?\n## Context:\nCREATE TABLE course (dept_name VARCHAR, credits INTEGER)\n",
        "output": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of all courses ordered by their titles and credits.\n## Context:\nCREATE TABLE course (title VARCHAR, credits VARCHAR)\n",
        "output": "SELECT title FROM course ORDER BY title, credits"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich department has the lowest budget?\n## Context:\nCREATE TABLE department (dept_name VARCHAR, budget VARCHAR)\n",
        "output": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names and buildings of all departments sorted by the budget from large to small.\n## Context:\nCREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget VARCHAR)\n",
        "output": "SELECT dept_name, building FROM department ORDER BY budget DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWho is the instructor with the highest salary?\n## Context:\nCREATE TABLE instructor (name VARCHAR, salary VARCHAR)\n",
        "output": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the information of all instructors ordered by their salary in ascending order.\n## Context:\nCREATE TABLE instructor (salary VARCHAR)\n",
        "output": "SELECT * FROM instructor ORDER BY salary"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the students and their department names sorted by their total credits in ascending order.\n## Context:\nCREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)\n",
        "output": "SELECT name, dept_name FROM student ORDER BY tot_cred"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nlist in alphabetic order all course names and their instructors' names in year 2008.\n## Context:\nCREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE teaches (course_id VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of instructors who are advising more than one student.\n## Context:\nCREATE TABLE advisor (i_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the students who have more than one advisor?\n## Context:\nCREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE advisor (s_id VARCHAR)\n",
        "output": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of rooms with more than 50 capacity for each building.\n## Context:\nCREATE TABLE classroom (building VARCHAR, capacity INTEGER)\n",
        "output": "SELECT COUNT(*), building FROM classroom WHERE capacity > 50 GROUP BY building"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the maximum and average capacity among rooms in each building.\n## Context:\nCREATE TABLE classroom (building VARCHAR, capacity INTEGER)\n",
        "output": "SELECT MAX(capacity), AVG(capacity), building FROM classroom GROUP BY building"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the title of the course that is offered by more than one department.\n## Context:\nCREATE TABLE course (title VARCHAR)\n",
        "output": "SELECT title FROM course GROUP BY title HAVING COUNT(*) > 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total credits of courses provided by different department.\n## Context:\nCREATE TABLE course (dept_name VARCHAR, credits INTEGER)\n",
        "output": "SELECT SUM(credits), dept_name FROM course GROUP BY dept_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the minimum salary for the departments whose average salary is above the average payment of all instructors.\n## Context:\nCREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)\n",
        "output": "SELECT MIN(salary), dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of courses provided in each semester and year.\n## Context:\nCREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT COUNT(*), semester, YEAR FROM SECTION GROUP BY semester, YEAR"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the year which offers the largest number of courses.\n## Context:\nCREATE TABLE SECTION (YEAR VARCHAR)\n",
        "output": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the year and semester when offers the largest number of courses.\n## Context:\nCREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT semester, YEAR FROM SECTION GROUP BY semester, YEAR ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of department has the highest amount of students?\n## Context:\nCREATE TABLE student (dept_name VARCHAR)\n",
        "output": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total number of students in each department.\n## Context:\nCREATE TABLE student (dept_name VARCHAR)\n",
        "output": "SELECT COUNT(*), dept_name FROM student GROUP BY dept_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the semester and year which has the least number of student taking any class.\n## Context:\nCREATE TABLE takes (semester VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT semester, YEAR FROM takes GROUP BY semester, YEAR ORDER BY COUNT(*) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the id of the instructor who advises of all students from History department?\n## Context:\nCREATE TABLE advisor (s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)\n",
        "output": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and salary of the instructors who are advisors of any student from History department?\n## Context:\nCREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)\n",
        "output": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the id of the courses that do not have any prerequisite?\n## Context:\nCREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)\n",
        "output": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the title of the prerequisite class of International Finance course?\n## Context:\nCREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)\n",
        "output": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the title of course whose prerequisite is course Differential Geometry.\n## Context:\nCREATE TABLE prereq (course_id VARCHAR, prereq_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)\n",
        "output": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of students who have taken any course in the fall semester of year 2003.\n## Context:\nCREATE TABLE student (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR); CREATE TABLE takes (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?\n## Context:\nCREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE SECTION (course_id VARCHAR)\n",
        "output": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the instructors who taught C Programming course before.\n## Context:\nCREATE TABLE teaches (id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and salary of instructors who are advisors of the students from the Math department.\n## Context:\nCREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)\n",
        "output": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.\n## Context:\nCREATE TABLE student (id VARCHAR, dept_name VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the course title of the prerequisite of course Mobile Computing?\n## Context:\nCREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)\n",
        "output": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of instructor who is the advisor of the student who has the highest number of total credits.\n## Context:\nCREATE TABLE student (id VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of instructors who didn't teach any courses?\n## Context:\nCREATE TABLE teaches (name VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)\n",
        "output": "SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the id of instructors who didn't teach any courses?\n## Context:\nCREATE TABLE teaches (id VARCHAR); CREATE TABLE instructor (id VARCHAR)\n",
        "output": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of instructors who didn't each any courses in any Spring semester.\n## Context:\nCREATE TABLE teaches (name VARCHAR, id VARCHAR, semester VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR, semester VARCHAR)\n",
        "output": "SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches WHERE semester = 'Spring')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the department which has the highest average salary of professors.\n## Context:\nCREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)\n",
        "output": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number and averaged salary of all instructors who are in the department with the highest budget.\n## Context:\nCREATE TABLE department (dept_name VARCHAR, budget VARCHAR); CREATE TABLE instructor (salary INTEGER, dept_name VARCHAR)\n",
        "output": "SELECT AVG(T1.salary), COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?\n## Context:\nCREATE TABLE SECTION (course_id VARCHAR, building VARCHAR, room_number VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, course_id VARCHAR); CREATE TABLE classroom (capacity INTEGER, building VARCHAR, room_number VARCHAR); CREATE TABLE classroom (capacity INTEGER)\n",
        "output": "SELECT T3.title, T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT MAX(capacity) FROM classroom)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of students who didn't take any course from Biology department.\n## Context:\nCREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)\n",
        "output": "SELECT name FROM student WHERE NOT id IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total number of students and total number of instructors for each department.\n## Context:\nCREATE TABLE department (dept_name VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR); CREATE TABLE instructor (dept_name VARCHAR, id VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT T2.id), COUNT(DISTINCT T3.id), T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of students who have taken the prerequisite course of the course with title International Finance.\n## Context:\nCREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)\n",
        "output": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.\n## Context:\nCREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)\n",
        "output": "SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of students who took some course offered by Statistics department.\n## Context:\nCREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE takes (course_id VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)\n",
        "output": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.\n## Context:\nCREATE TABLE SECTION (building VARCHAR, room_number VARCHAR, semester VARCHAR, year VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR, title VARCHAR)\n",
        "output": "SELECT T2.building, T2.room_number, T2.semester, T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all instructors in computer science department\n## Context:\nCREATE TABLE instructor (name VARCHAR, dept_name VARCHAR)\n",
        "output": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all instructors in Comp. Sci. department with salary > 80000.\n## Context:\nCREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)\n",
        "output": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all instructors who have taught some course and the course_id.\n## Context:\nCREATE TABLE instructor (ID VARCHAR); CREATE TABLE teaches (ID VARCHAR)\n",
        "output": "SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all instructors in the Art department who have taught some course and the course_id.\n## Context:\nCREATE TABLE instructor (ID VARCHAR, dept_name VARCHAR); CREATE TABLE teaches (ID VARCHAR)\n",
        "output": "SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all instructors whose name includes the substring \u201cdar\u201d.\n## Context:\nCREATE TABLE instructor (name VARCHAR)\n",
        "output": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList in alphabetic order the names of all distinct instructors.\n## Context:\nCREATE TABLE instructor (name VARCHAR)\n",
        "output": "SELECT DISTINCT name FROM instructor ORDER BY name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind courses that ran in Fall 2009 or in Spring 2010.\n## Context:\nCREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind courses that ran in Fall 2009 and in Spring 2010.\n## Context:\nCREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind courses that ran in Fall 2009 but not in Spring 2010.\n## Context:\nCREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the salaries of all distinct instructors that are less than the largest salary.\n## Context:\nCREATE TABLE instructor (salary INTEGER)\n",
        "output": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total number of instructors who teach a course in the Spring 2010 semester.\n## Context:\nCREATE TABLE teaches (ID VARCHAR, semester VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names and average salaries of all departments whose average salary is greater than 42000.\n## Context:\nCREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)\n",
        "output": "SELECT dept_name, AVG(salary) FROM instructor GROUP BY dept_name HAVING AVG(salary) > 42000"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind names of instructors with salary greater than that of some (at least one) instructor in the Biology department.\n## Context:\nCREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)\n",
        "output": "SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.\n## Context:\nCREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)\n",
        "output": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many debates are there?\n## Context:\nCREATE TABLE debate (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM debate"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the venues of debates in ascending order of the number of audience.\n## Context:\nCREATE TABLE debate (Venue VARCHAR, Num_of_Audience VARCHAR)\n",
        "output": "SELECT Venue FROM debate ORDER BY Num_of_Audience"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the date and venue of each debate?\n## Context:\nCREATE TABLE debate (Date VARCHAR, Venue VARCHAR)\n",
        "output": "SELECT Date, Venue FROM debate"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the dates of debates with number of audience bigger than 150\n## Context:\nCREATE TABLE debate (Date VARCHAR, Num_of_Audience INTEGER)\n",
        "output": "SELECT Date FROM debate WHERE Num_of_Audience > 150"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of people aged either 35 or 36.\n## Context:\nCREATE TABLE people (Name VARCHAR, Age VARCHAR)\n",
        "output": "SELECT Name FROM people WHERE Age = 35 OR Age = 36"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the party of the youngest people?\n## Context:\nCREATE TABLE people (Party VARCHAR, Age VARCHAR)\n",
        "output": "SELECT Party FROM people ORDER BY Age LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow different parties of people along with the number of people in each party.\n## Context:\nCREATE TABLE people (Party VARCHAR)\n",
        "output": "SELECT Party, COUNT(*) FROM people GROUP BY Party"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the party that has the most people.\n## Context:\nCREATE TABLE people (Party VARCHAR)\n",
        "output": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the distinct venues of debates\n## Context:\nCREATE TABLE debate (Venue VARCHAR)\n",
        "output": "SELECT DISTINCT Venue FROM debate"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of people, and dates and venues of debates they are on the affirmative side.\n## Context:\nCREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)\n",
        "output": "SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.\n## Context:\nCREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Negative VARCHAR)\n",
        "output": "SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of people that are on affirmative side of debates with number of audience bigger than 200.\n## Context:\nCREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Debate_ID VARCHAR, Num_of_Audience INTEGER); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)\n",
        "output": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE T2.Num_of_Audience > 200"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of people and the number of times they have been on the affirmative side of debates.\n## Context:\nCREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate_people (Affirmative VARCHAR)\n",
        "output": "SELECT T2.Name, COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of people who have been on the negative side of debates at least twice.\n## Context:\nCREATE TABLE debate_people (Negative VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)\n",
        "output": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of people that have not been on the affirmative side of debates.\n## Context:\nCREATE TABLE debate_people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR); CREATE TABLE people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR)\n",
        "output": "SELECT Name FROM people WHERE NOT People_id IN (SELECT Affirmative FROM debate_people)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of all the customers in alphabetical order.\n## Context:\nCREATE TABLE customers (customer_details VARCHAR)\n",
        "output": "SELECT customer_details FROM customers ORDER BY customer_details"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind all the policy type codes associated with the customer \"Dayana Robel\"\n## Context:\nCREATE TABLE customers (customer_id VARCHAR, customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)\n",
        "output": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich type of policy is most frequently used? Give me the policy type code.\n## Context:\nCREATE TABLE policies (policy_type_code VARCHAR)\n",
        "output": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind all the policy types that are used by more than 2 customers.\n## Context:\nCREATE TABLE policies (policy_type_code VARCHAR)\n",
        "output": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING COUNT(*) > 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total and average amount paid in claim headers.\n## Context:\nCREATE TABLE claim_headers (amount_piad INTEGER)\n",
        "output": "SELECT SUM(amount_piad), AVG(amount_piad) FROM claim_headers"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the total amount claimed in the most recently created document.\n## Context:\nCREATE TABLE claim_headers (amount_claimed INTEGER, claim_header_id VARCHAR); CREATE TABLE claims_documents (claim_id VARCHAR, created_date VARCHAR); CREATE TABLE claims_documents (created_date VARCHAR)\n",
        "output": "SELECT SUM(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the customer who has made the largest amount of claim in a single claim?\n## Context:\nCREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (amount_claimed INTEGER); CREATE TABLE policies (policy_id VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (policy_id VARCHAR, amount_claimed INTEGER)\n",
        "output": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT MAX(amount_claimed) FROM claim_headers)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the customer who has made the minimum amount of payment in one claim?\n## Context:\nCREATE TABLE claim_headers (amount_piad INTEGER); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (policy_id VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (policy_id VARCHAR, amount_piad INTEGER)\n",
        "output": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT MIN(amount_piad) FROM claim_headers)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of customers who have no policies associated.\n## Context:\nCREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)\n",
        "output": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many claim processing stages are there in total?\n## Context:\nCREATE TABLE claims_processing_stages (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM claims_processing_stages"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the claim processing stage that most of the claims are on?\n## Context:\nCREATE TABLE claims_processing (claim_stage_id VARCHAR); CREATE TABLE claims_processing_stages (claim_status_name VARCHAR, claim_stage_id VARCHAR)\n",
        "output": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of customers whose name contains \"Diana\".\n## Context:\nCREATE TABLE customers (customer_details VARCHAR)\n",
        "output": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of the customers who have an deputy policy.\n## Context:\nCREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of customers who either have an deputy policy or uniformed policy.\n## Context:\nCREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of all the customers and staff members.\n## Context:\nCREATE TABLE staff (customer_details VARCHAR, staff_details VARCHAR); CREATE TABLE customers (customer_details VARCHAR, staff_details VARCHAR)\n",
        "output": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of records of each policy type and its type code.\n## Context:\nCREATE TABLE policies (policy_type_code VARCHAR)\n",
        "output": "SELECT policy_type_code, COUNT(*) FROM policies GROUP BY policy_type_code"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the customer that has been involved in the most policies.\n## Context:\nCREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (customer_id VARCHAR)\n",
        "output": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the description of the claim status \"Open\"?\n## Context:\nCREATE TABLE claims_processing_stages (claim_status_description VARCHAR, claim_status_name VARCHAR)\n",
        "output": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many distinct claim outcome codes are there?\n## Context:\nCREATE TABLE claims_processing (claim_outcome_code VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT claim_outcome_code) FROM claims_processing"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhich customer is associated with the latest policy?\n## Context:\nCREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (start_date INTEGER); CREATE TABLE policies (customer_id VARCHAR, start_date INTEGER)\n",
        "output": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT MAX(start_date) FROM policies)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the id, the date of account opened, the account name, and other account detail for all accounts.\n## Context:\nCREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR)\n",
        "output": "SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.\n## Context:\nCREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR)\n",
        "output": "SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.\n## Context:\nCREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the first name and last name for the customer with account name 900.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"900\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the unique first names, last names, and phone numbers for all customers with any account.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, phone_number VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name, T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow customer ids who don't have an account.\n## Context:\nCREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)\n",
        "output": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many accounts does each customer have? List the number and customer id.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR)\n",
        "output": "SELECT COUNT(*), customer_id FROM Accounts GROUP BY customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the customer id, first and last name with most number of accounts.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow id, first name and last name for all customers and the number of accounts.\n## Context:\nCREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name, COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow first name and id for all customers with at least 2 accounts.\n## Context:\nCREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)\n",
        "output": "SELECT T2.customer_first_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the number of customers for each gender.\n## Context:\nCREATE TABLE Customers (gender VARCHAR)\n",
        "output": "SELECT gender, COUNT(*) FROM Customers GROUP BY gender"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many transactions do we have?\n## Context:\nCREATE TABLE Financial_transactions (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Financial_transactions"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many transaction does each account have? Show the number and account id.\n## Context:\nCREATE TABLE Financial_transactions (account_id VARCHAR)\n",
        "output": "SELECT COUNT(*), account_id FROM Financial_transactions"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many transaction does account with name 337 have?\n## Context:\nCREATE TABLE Accounts (account_id VARCHAR, account_name VARCHAR); CREATE TABLE Financial_transactions (account_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = \"337\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average, minimum, maximum, and total transaction amount?\n## Context:\nCREATE TABLE Financial_transactions (transaction_amount INTEGER)\n",
        "output": "SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) FROM Financial_transactions"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow ids for all transactions whose amounts are greater than the average.\n## Context:\nCREATE TABLE Financial_transactions (transaction_id VARCHAR, transaction_amount INTEGER)\n",
        "output": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_transactions)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the transaction types and the total amount of transactions.\n## Context:\nCREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)\n",
        "output": "SELECT transaction_type, SUM(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the account name, id and the number of transactions for each account.\n## Context:\nCREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)\n",
        "output": "SELECT T2.account_name, T1.account_id, COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the account id with most number of transactions.\n## Context:\nCREATE TABLE Financial_transactions (account_id VARCHAR)\n",
        "output": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the account id and name with at least 4 transactions.\n## Context:\nCREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)\n",
        "output": "SELECT T1.account_id, T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING COUNT(*) >= 4"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all product sizes.\n## Context:\nCREATE TABLE Products (product_size VARCHAR)\n",
        "output": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all product colors.\n## Context:\nCREATE TABLE Products (product_color VARCHAR)\n",
        "output": "SELECT DISTINCT product_color FROM Products"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the invoice number and the number of transactions for each invoice.\n## Context:\nCREATE TABLE Financial_transactions (invoice_number VARCHAR)\n",
        "output": "SELECT invoice_number, COUNT(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the invoice number and invoice date for the invoice with most number of transactions?\n## Context:\nCREATE TABLE Invoices (invoice_number VARCHAR, invoice_date VARCHAR); CREATE TABLE Financial_transactions (invoice_number VARCHAR)\n",
        "output": "SELECT T2.invoice_number, T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many invoices do we have?\n## Context:\nCREATE TABLE Invoices (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM Invoices"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow invoice dates and order id and details for all invoices.\n## Context:\nCREATE TABLE Invoices (invoice_date VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_details VARCHAR, order_id VARCHAR)\n",
        "output": "SELECT T1.invoice_date, T1.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the order ids and the number of invoices for each order.\n## Context:\nCREATE TABLE Invoices (order_id VARCHAR)\n",
        "output": "SELECT order_id, COUNT(*) FROM Invoices GROUP BY order_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the order id and order details for the order more than two invoices.\n## Context:\nCREATE TABLE Orders (order_id VARCHAR, order_details VARCHAR); CREATE TABLE Invoices (order_id VARCHAR)\n",
        "output": "SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING COUNT(*) > 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the customer last name, id and phone number with most number of orders?\n## Context:\nCREATE TABLE Orders (customer_id VARCHAR); CREATE TABLE Customers (customer_last_name VARCHAR, phone_number VARCHAR, customer_id VARCHAR)\n",
        "output": "SELECT T2.customer_last_name, T1.customer_id, T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all product names without an order.\n## Context:\nCREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR); CREATE TABLE Products (product_name VARCHAR)\n",
        "output": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all product names and the total quantity ordered for each product name.\n## Context:\nCREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_quantity INTEGER, product_id VARCHAR)\n",
        "output": "SELECT T2.product_name, SUM(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the order ids and the number of items in each order.\n## Context:\nCREATE TABLE Order_items (order_id VARCHAR)\n",
        "output": "SELECT order_id, COUNT(*) FROM Order_items GROUP BY order_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the product ids and the number of unique orders containing each product.\n## Context:\nCREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR)\n",
        "output": "SELECT product_id, COUNT(DISTINCT order_id) FROM Order_items GROUP BY product_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all product names and the number of customers having an order on each product.\n## Context:\nCREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_id VARCHAR); CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR)\n",
        "output": "SELECT T2.product_name, COUNT(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow order ids and the number of products in each order.\n## Context:\nCREATE TABLE Order_items (order_id VARCHAR, product_id VARCHAR)\n",
        "output": "SELECT order_id, COUNT(DISTINCT product_id) FROM Order_items GROUP BY order_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow order ids and the total quantity in each order.\n## Context:\nCREATE TABLE Order_items (order_id VARCHAR, product_quantity INTEGER)\n",
        "output": "SELECT order_id, SUM(product_quantity) FROM Order_items GROUP BY order_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many products were not included in any order?\n## Context:\nCREATE TABLE products (product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM products WHERE NOT product_id IN (SELECT product_id FROM Order_items)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many churches opened before 1850 are there?\n## Context:\nCREATE TABLE Church (Open_Date INTEGER)\n",
        "output": "SELECT COUNT(*) FROM Church WHERE Open_Date < 1850"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name, open date, and organizer for all churches.\n## Context:\nCREATE TABLE Church (name VARCHAR, open_date VARCHAR, organized_by VARCHAR)\n",
        "output": "SELECT name, open_date, organized_by FROM Church"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all church names in descending order of opening date.\n## Context:\nCREATE TABLE church (name VARCHAR, open_date VARCHAR)\n",
        "output": "SELECT name FROM church ORDER BY open_date DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the opening year in whcih at least two churches opened.\n## Context:\nCREATE TABLE church (open_date VARCHAR)\n",
        "output": "SELECT open_date FROM church GROUP BY open_date HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the organizer and name for churches that opened between 1830 and 1840.\n## Context:\nCREATE TABLE church (organized_by VARCHAR, name VARCHAR, open_date INTEGER)\n",
        "output": "SELECT organized_by, name FROM church WHERE open_date BETWEEN 1830 AND 1840"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all opening years and the number of churches that opened in that year.\n## Context:\nCREATE TABLE church (open_date VARCHAR)\n",
        "output": "SELECT open_date, COUNT(*) FROM church GROUP BY open_date"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name and opening year for three churches that opened most recently.\n## Context:\nCREATE TABLE church (name VARCHAR, open_date VARCHAR)\n",
        "output": "SELECT name, open_date FROM church ORDER BY open_date DESC LIMIT 3"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many female people are older than 30 in our record?\n## Context:\nCREATE TABLE people (is_male VARCHAR, age VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM people WHERE is_male = 'F' AND age > 30"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the country where people older than 30 and younger than 25 are from.\n## Context:\nCREATE TABLE people (country VARCHAR, age INTEGER)\n",
        "output": "SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the minimum, maximum, and average age for all people.\n## Context:\nCREATE TABLE people (age INTEGER)\n",
        "output": "SELECT MIN(age), MAX(age), AVG(age) FROM people"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name and country for all people whose age is smaller than the average.\n## Context:\nCREATE TABLE people (name VARCHAR, country VARCHAR, age INTEGER)\n",
        "output": "SELECT name, country FROM people WHERE age < (SELECT AVG(age) FROM people)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the pair of male and female names in all weddings after year 2014\n## Context:\nCREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, year INTEGER); CREATE TABLE people (name VARCHAR, people_id VARCHAR)\n",
        "output": "SELECT T2.name, T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the name and age for all male people who don't have a wedding.\n## Context:\nCREATE TABLE wedding (name VARCHAR, age VARCHAR, is_male VARCHAR, people_id VARCHAR, male_id VARCHAR); CREATE TABLE people (name VARCHAR, age VARCHAR, is_male VARCHAR, people_id VARCHAR, male_id VARCHAR)\n",
        "output": "SELECT name, age FROM people WHERE is_male = 'T' AND NOT people_id IN (SELECT male_id FROM wedding)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all church names except for those that had a wedding in year 2015.\n## Context:\nCREATE TABLE church (name VARCHAR); CREATE TABLE wedding (church_id VARCHAR, year VARCHAR); CREATE TABLE church (name VARCHAR, church_id VARCHAR)\n",
        "output": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all church names that have hosted least two weddings.\n## Context:\nCREATE TABLE wedding (church_id VARCHAR); CREATE TABLE church (name VARCHAR, church_id VARCHAR)\n",
        "output": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING COUNT(*) >= 2"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names for all females from Canada having a wedding in year 2016.\n## Context:\nCREATE TABLE people (name VARCHAR, people_id VARCHAR, country VARCHAR, is_male VARCHAR); CREATE TABLE wedding (female_id VARCHAR, year VARCHAR)\n",
        "output": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many weddings are there in year 2016?\n## Context:\nCREATE TABLE wedding (YEAR VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM wedding WHERE YEAR = 2016"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the church names for the weddings of all people older than 30.\n## Context:\nCREATE TABLE church (name VARCHAR, church_id VARCHAR); CREATE TABLE people (people_id VARCHAR, age VARCHAR); CREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, church_id VARCHAR)\n",
        "output": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all countries and the number of people from each country.\n## Context:\nCREATE TABLE people (country VARCHAR)\n",
        "output": "SELECT country, COUNT(*) FROM people GROUP BY country"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many churches have a wedding in year 2016?\n## Context:\nCREATE TABLE wedding (church_id VARCHAR, YEAR VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT church_id) FROM wedding WHERE YEAR = 2016"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many artists do we have?\n## Context:\nCREATE TABLE artist (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM artist"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all artist name, age, and country ordered by the yeared they joined.\n## Context:\nCREATE TABLE artist (name VARCHAR, age VARCHAR, country VARCHAR, Year_Join VARCHAR)\n",
        "output": "SELECT name, age, country FROM artist ORDER BY Year_Join"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are all distinct country for artists?\n## Context:\nCREATE TABLE artist (country VARCHAR)\n",
        "output": "SELECT DISTINCT country FROM artist"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all artist names and the year joined who are not from United States.\n## Context:\nCREATE TABLE artist (name VARCHAR, year_join VARCHAR, country VARCHAR)\n",
        "output": "SELECT name, year_join FROM artist WHERE country <> 'United States'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many artists are above age 46 and joined after 1990?\n## Context:\nCREATE TABLE artist (age VARCHAR, year_join VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM artist WHERE age > 46 AND year_join > 1990"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the average and minimum age of all artists from United States.\n## Context:\nCREATE TABLE artist (age INTEGER, country VARCHAR)\n",
        "output": "SELECT AVG(age), MIN(age) FROM artist WHERE country = 'United States'"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the artist who joined latest?\n## Context:\nCREATE TABLE artist (name VARCHAR, year_join VARCHAR)\n",
        "output": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many exhibition are there in year 2005 or after?\n## Context:\nCREATE TABLE exhibition (YEAR VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM exhibition WHERE YEAR >= 2005"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow theme and year for all exhibitions with ticket prices lower than 15.\n## Context:\nCREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price INTEGER)\n",
        "output": "SELECT theme, YEAR FROM exhibition WHERE ticket_price < 15"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all artist names and the number of exhibitions for each artist.\n## Context:\nCREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (artist_id VARCHAR)\n",
        "output": "SELECT T2.name, COUNT(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name and country for the artist with most number of exhibitions?\n## Context:\nCREATE TABLE exhibition (artist_id VARCHAR); CREATE TABLE artist (name VARCHAR, country VARCHAR, artist_id VARCHAR)\n",
        "output": "SELECT T2.name, T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow names for artists without any exhibition.\n## Context:\nCREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (name VARCHAR, artist_id VARCHAR)\n",
        "output": "SELECT name FROM artist WHERE NOT artist_id IN (SELECT artist_id FROM exhibition)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the theme and artist name for the exhibition with a ticket price higher than the average?\n## Context:\nCREATE TABLE exhibition (ticket_price INTEGER); CREATE TABLE exhibition (theme VARCHAR, artist_id VARCHAR, ticket_price INTEGER); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)\n",
        "output": "SELECT T1.theme, T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT AVG(ticket_price) FROM exhibition)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.\n## Context:\nCREATE TABLE exhibition (ticket_price INTEGER, YEAR INTEGER)\n",
        "output": "SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price) FROM exhibition WHERE YEAR < 2009"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow theme and year for all exhibitions in an descending order of ticket price.\n## Context:\nCREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price VARCHAR)\n",
        "output": "SELECT theme, YEAR FROM exhibition ORDER BY ticket_price DESC"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the theme, date, and attendance for the exhibition in year 2004?\n## Context:\nCREATE TABLE exhibition_record (date VARCHAR, attendance VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR, year VARCHAR)\n",
        "output": "SELECT T2.theme, T1.date, T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all artist names who didn't have an exhibition in 2004.\n## Context:\nCREATE TABLE exhibition (artist_id VARCHAR, year VARCHAR); CREATE TABLE artist (name VARCHAR); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)\n",
        "output": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the theme for exhibitions with both records of an attendance below 100 and above 500.\n## Context:\nCREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)\n",
        "output": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many exhibitions have a attendance more than 100 or have a ticket price below 10?\n## Context:\nCREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, ticket_price VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow all artist names with an average exhibition attendance over 200.\n## Context:\nCREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)\n",
        "output": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING AVG(T1.attendance) > 200"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the id of the item whose title is \"orange\".\n## Context:\nCREATE TABLE item (i_id VARCHAR, title VARCHAR)\n",
        "output": "SELECT i_id FROM item WHERE title = \"orange\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList all information in the item table.\n## Context:\nCREATE TABLE item (Id VARCHAR)\n",
        "output": "SELECT * FROM item"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of reviews.\n## Context:\nCREATE TABLE review (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM review"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many users are there?\n## Context:\nCREATE TABLE useracct (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM useracct"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the average and maximum rating of all reviews.\n## Context:\nCREATE TABLE review (rating INTEGER)\n",
        "output": "SELECT AVG(rating), MAX(rating) FROM review"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the highest rank of all reviews.\n## Context:\nCREATE TABLE review (rank INTEGER)\n",
        "output": "SELECT MIN(rank) FROM review"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many different users wrote some reviews?\n## Context:\nCREATE TABLE review (u_id VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT u_id) FROM review"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many different items were reviewed by some users?\n## Context:\nCREATE TABLE review (i_id VARCHAR)\n",
        "output": "SELECT COUNT(DISTINCT i_id) FROM review"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of items that did not receive any review.\n## Context:\nCREATE TABLE review (i_id VARCHAR); CREATE TABLE item (i_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM item WHERE NOT i_id IN (SELECT i_id FROM review)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of users who did not leave any review.\n## Context:\nCREATE TABLE review (name VARCHAR, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)\n",
        "output": "SELECT name FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of goods that receive a rating of 10.\n## Context:\nCREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating VARCHAR)\n",
        "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the titles of items whose rating is higher than the average review rating of all items.\n## Context:\nCREATE TABLE review (rating INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)\n",
        "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > (SELECT AVG(rating) FROM review)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the titles of items that received any rating below 5.\n## Context:\nCREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)\n",
        "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the titles of items that received both a rating higher than 8 and a rating below 5.\n## Context:\nCREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)\n",
        "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of items whose rank is higher than 3 and whose average rating is above 5.\n## Context:\nCREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rank INTEGER, rating INTEGER)\n",
        "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING AVG(T2.rating) > 5"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the item with the lowest average rating.\n## Context:\nCREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)\n",
        "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the titles of all items in alphabetic order .\n## Context:\nCREATE TABLE item (title VARCHAR)\n",
        "output": "SELECT title FROM item ORDER BY title"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the user who gives the most reviews.\n## Context:\nCREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)\n",
        "output": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and id of the item with the highest average rating.\n## Context:\nCREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)\n",
        "output": "SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name and id of the good with the highest average rank.\n## Context:\nCREATE TABLE review (i_id VARCHAR, rank INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR)\n",
        "output": "SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rank) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFor each user, return the name and the average rating of reviews given by them.\n## Context:\nCREATE TABLE review (rating INTEGER, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)\n",
        "output": "SELECT T1.name, AVG(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFor each user, find their name and the number of reviews written by them.\n## Context:\nCREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)\n",
        "output": "SELECT T1.name, COUNT(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the user who gave the highest rating.\n## Context:\nCREATE TABLE review (u_id VARCHAR, rating VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)\n",
        "output": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the source user with the highest average trust score.\n## Context:\nCREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE trust (source_u_id VARCHAR)\n",
        "output": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY AVG(trust) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind each target user's name and average trust score.\n## Context:\nCREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)\n",
        "output": "SELECT T1.name, AVG(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the name of the target user with the lowest trust score.\n## Context:\nCREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)\n",
        "output": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the names of the items that did not receive any review.\n## Context:\nCREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (title VARCHAR, i_id VARCHAR)\n",
        "output": "SELECT title FROM item WHERE NOT i_id IN (SELECT i_id FROM review)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nFind the number of users who did not write any review.\n## Context:\nCREATE TABLE review (u_id VARCHAR); CREATE TABLE useracct (u_id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nHow many players are there?\n## Context:\nCREATE TABLE player (Id VARCHAR)\n",
        "output": "SELECT COUNT(*) FROM player"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the names of players in ascending order of votes.\n## Context:\nCREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)\n",
        "output": "SELECT Player_name FROM player ORDER BY Votes"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat are the gender and occupation of players?\n## Context:\nCREATE TABLE player (Gender VARCHAR, Occupation VARCHAR)\n",
        "output": "SELECT Gender, Occupation FROM player"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nList the name and residence for players whose occupation is not \"Researcher\".\n## Context:\nCREATE TABLE player (Player_name VARCHAR, residence VARCHAR, Occupation VARCHAR)\n",
        "output": "SELECT Player_name, residence FROM player WHERE Occupation <> \"Researcher\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".\n## Context:\nCREATE TABLE player (Sponsor_name VARCHAR, Residence VARCHAR)\n",
        "output": "SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Residence = \"Birtle\""
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nWhat is the name of the player with the largest number of votes?\n## Context:\nCREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)\n",
        "output": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow different occupations along with the number of players in each occupation.\n## Context:\nCREATE TABLE player (Occupation VARCHAR)\n",
        "output": "SELECT Occupation, COUNT(*) FROM player GROUP BY Occupation"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nPlease show the most common occupation of players.\n## Context:\nCREATE TABLE player (Occupation VARCHAR)\n",
        "output": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "instruction": "Please convert the provided natural language query into an SQL query, taking into account the structure of the database defined by the accompanying CREATE statement:\n",
        "input": "## Natural Language Query:\nShow the residences that have at least two players.\n## Context:\nCREATE TABLE player (Residence VARCHAR)\n",
        "output": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2"
    }
]